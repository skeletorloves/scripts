/*
	
	20170726a NTMManualGame.ntj
	
*/

var _keyExtras = false;
var d2B_usingAFollower = false;
var _quiet = true;
var _throneLeechers = false;
var _dollChk = true;
var _dollSoul;
var _follow = false;
var _barbHop = false

var tpSorc = "aaa";
var _SkeletonArmy = 11;
var _Revives = 23;

var _keycodeMenu = 0;	// for switching through thru customized keycode menus

var Rev = "1.1.3";
var warncount;
var _AreaName;
var busy = false;
var _Teleport = -1;

var array_myTeam = [];
var array_myTeamCompare = [];
var array_myTeamArea = [];

/*	notes on edits...
		Utilizing (D2Etal/D2Etal/scripts/NTManual/Manual_Game/Variables.ntl) to add a handful of new variables:
			array_myTeam: used for storying the names of all the peeps who are in the game
			array_myTeamCompare: used for verifying that everyone in array_myTeam is still in game

*/

function NTMain() {
	Include("libs/common/NTCommon.ntl");
	Include("NTManual/Manual_Game/AutoTele.ntl");
	
	NTC_IncludeLibs();

	Include("NTManual/Manual_Game/Variables.ntl");
	MG_LoadConfig(me.charname);
	CheckMap();
	AreaPoi();
	ScanPlayers();
	MG_InitializeStats();
	MG_CheckBeltStuff(true);

	d2B_initCharVars();
	
	if(NTConfig_HostileHandler)
		Load("NTBot/tools/NTHostHandler.ntj");
		
	if(MGConfig_PickItems){
		MG_PickitLoad();
		if (!NTSI_LoadNIPFiles("NTManual/Manual_Game")) {
			MG_LogToOOG(NTC_LOG_COMMON, COLOR_1 + "Error loading NIPFiles");
		}
		
	}

	RegisterEvent(EVENT_KEYDOWN, NT_KeyEvents);
	RegisterEvent(EVENT_GAMEMSG, MG_GameMsgEvent);

	var _count = 0;
	me.maxgametime = 0;
	Delay(Random(100,200));
	Print(COLOR_2 + "Customized key menu: 0 " + COLOR_5 + "for quick leveling of followers in chaos & throne...");
			
	while(1) {	
		ChickenStuff(); MG_Resists(); MG_AntiIdle();
		if(_count++ > 500) {
			if(MGConfig_AutoParty) { MG_PartyUp(); }
			if(MGConfig_CheckStuff) { Town_CheckStuff(MG_CS[0], MG_CS[1], MG_CS[2], MG_CS[3]); }
			_count = 0;
		}
		if(!InTown()) {
			if(MGConfig_PickAuto) { Delay(1000); NTSI_PickItems(); }
		}
		_AreaName =	AreaPoi();
		if(_AreaName.length < 2) { SetStatusText(COLOR_4 + Rev + _AreaName[0]); } //+ " Ping: " + me.ping); }
		else { SetStatusText(COLOR_4 + Rev + _AreaName[0] + COLOR_4 + " or" + _AreaName[1]); } //+ " Ping: " + me.ping); } 
		Delay(100);
	}
}

function MG_PartyUp() {
	_player = GetPlayerUnit();
	if(_player) {
		_mypartyid = _player.partyid;
		while(_player.GetNext()) {
			if(_player.partyid == 65535 || _player.partyid != _mypartyid) {
				if(_player.partyflag == 2) {
					me.ClickParty(_player, 2);
					break;
				}
				if(_player.partyid == 65535) {
					if(_player.partyflag == 4)
						break;
					me.ClickParty(_player, 2);
					NTC_Delay(NTC_DELAY_FRAME);
					if(_player.partyflag == 4 || (_player.partyid != 65535 && _player.partyid == _mypartyid))
						break;
				}
			}
		}
	} return;
}


function CheckMap() {
	me.revealautomap = (MGConfig_ShowMap) ? true : false;
	me.showenemyonautomap = (MGConfig_ShowEnemy) ? true : false;
	me.showmissileonautomap = (MGConfig_ShowMissile) ? true : false;
	me.quitonhostile = (MGConfig_RunFromHostile) ? true : false;
}

function NT_KeyEvents(keycode) {
	switch(_keycodeMenu) {
		case 0:						// this one is for quick leveling of followers in chaos & throne
			/*
			case 46:			// [del] button (orig: Key_ExitGame)
			case 96:			// #pad 0: exit game (orig: Key_DoPrecast)
			case Key_AntiIdle: 	// [pause/break] button
			case 104:			// #pad 8: enable/disable pickit (orig: Key_DPSMeter)
			case 103:			// #pad 7: sending followers to a5 or a4 depending on leader's area
			
			case 97:			// #pad 1: msg "." call peeps to follow
			case 98:			// #pad 2: msg "." sending peeps to town
			case 99:			// #pad 3: signal team to do a little jump, if leader is stuck by the team's closeness
			case 100:			// #pad 4: sending tpSorc to chaos enterance, to make a tp, and return to town
			case 101:			// #pad 5: sending tpSorc to throne enterance, to make a tp, and return to town
			case 102:			// #pad 6: if I am a necro, make skellies and revives
			case 103:			// #pad 7: sending followers to a5 or a4 depending on leader's area
			case 105:			// #pad 9: buffing
			case 220: 			// "\": in case team has boxed me in, instruct team to jump away for a moment
			case 222:			// "'": send the zon to replenish her javs
			case 221:			// "]": chant team
			
			*/
			switch(keycode) {
				case 46:			// [del] button (orig: Key_ExitGame) for listing key settings
					d2B_keySettings(0);
					break;
				case 96:			// #pad 0: exit game (orig: Key_DoPrecast)
					ExitGame();
					break;
				case Key_AntiIdle:	// [pause/break] button
					_keycodeMenu = _keycodeMenu + 1;
					if(_keycodeMenu > 7) _keycodeMenu = 0;
					Print(COLOR_2 + "Customized key menu: " + COLOR_5 + "main control menu...");
					break;
				case 104:			// #pad 8: enable/disable pickit (orig: Key_DPSMeter)
					MGConfig_PickItems ? (MGConfig_PickItems = false) : (MGConfig_PickItems = true);
					MGConfig_PickAuto ? (MGConfig_PickAuto = false) : (MGConfig_PickAuto = true);
					Print(COLOR_2 + "MGConfig_PickItems" + COLOR_5 + MGConfig_PickItems);
					Delay(Random(1000,1700));
					Print(COLOR_5 + "MGConfig_PickAuto" + COLOR_2 + MGConfig_PickAuto);
					break;
				case 97:			// #pad 1: msg "." call peeps to follow
					Print(COLOR_2 + "calling followers...");
					if(InTown(me)) break;	
					NTM_MakeTP();
					Delay(500);
					if(d2B_usingAFollower) d2B_msg(". " + Random(1,134332));
					break;
				case 98:			// #pad 2: msg "." sending peeps to town
					Print(COLOR_2 + "sending followers to town...");
					if(InTown(me)) break;	
					NTM_MakeTP();
					Delay(500);
					if(d2B_usingAFollower) d2B_msg("' " + Random(1,134332));
					break;
				case 99:			// #pad 3: signal team to do a little jump, if leader is stuck by the team's closeness
					Print(COLOR_2 + "signalling team to jump away...");
					Delay(500);
					if(d2B_usingAFollower) d2B_msg("j " + Random(1,134332));
					break;
				case 100:			// #pad 4:	sending tpSorc to chaos enterance, to make a tp, and return to town
									//			if in Chaos, sends team to hide & leech diablo exp
					if(me.areaid == 103) {
						Print(COLOR_2 + "sending " + tpSorc + " to chaos to tp...");
						Delay(500);
						if(d2B_usingAFollower) d2B_msg(tpSorc + " cTP " + Random(1,134332));
						break;
					}
					if(me.areaid == 108) {
						Print(COLOR_2 + "sending team to safely leech in hiding area...");
						Delay(500);
						if(d2B_usingAFollower) d2B_msg("leechdiablo " + Random(1,134332));
						Delay(500);
						NTM_MoveTo(108, 7799, 5286);	// move to star
						MGConfig_PickItems = true;
						MGConfig_PickAuto = true;
						Print(COLOR_2 + "MGConfig_PickItems" + COLOR_5 + MGConfig_PickItems);
						Delay(Random(1000,1700));
						Print(COLOR_5 + "MGConfig_PickAuto" + COLOR_2 + MGConfig_PickAuto);
						break;
					}
					break;
				case 101:			// #pad 5:	sending tpSorc to throne enterance, to make a tp, and return to town
									//			if in throne, sends team to safely leech baal in wordlstone chamber
					if(me.areaid == 103) {
						Print(COLOR_2 + "sending " + tpSorc + " to throne to tp...");
						Delay(500);
						if(d2B_usingAFollower) d2B_msg(tpSorc + " tTP " + Random(1,134332));
						break;
					}
					if(me.areaid == 131) {
						Print(COLOR_2 + "sending team to safely leech in worldstone chamber...");
						Delay(500);
						if(d2B_usingAFollower) d2B_msg("leechbaal " + Random(1,134332));
						d2B_manualBaal();
						break;
					}
					break;
				case 102:			// #pad 6: if I am a necro, make skellies and revives
					Print(COLOR_2 + "making dah skellies & dah revives...");
					Delay(500);
					NTA_SkeletonArmy(_SkeletonArmy);
					NTA_ReviveArmy(_Revives);
					break;
				case 103:			// #pad 7: sending followers to a5 or a4 depending on leader's area
					Print(COLOR_2 + "sending followers to a5 or a4...");
					Delay(500);
					if(d2B_usingAFollower && (me.areaid == 108 || me.areaid == 103)) d2B_msg("ummm 5 " + Random(1,134332));
					if(d2B_usingAFollower && (me.areaid == 132 || me.areaid == 131 || me.areaid == 109)) d2B_msg("ummm 4 " + Random(1,134332));
					break;
				case 105:			// #pad 9: buffing
					Print(COLOR_2 + "making dah buff...");
					Delay(500);
					NTP_DoPrecast();
					Delay(500);
					if(d2B_usingAFollower && !InTown()) d2B_msg("buff " + Random(1,134332));
					break;
				case 220: 			// "\": in case team has boxed me in, instruct team to jump away for a moment
					Print(COLOR_2 + "making team jump away...");
					Delay(500);
					if(d2B_usingAFollower && !InTown()) d2B_msg("j " + Random(1,134332));
					break;
				case 222:			// "'": send the zon to replenish her javs
					Print(COLOR_2 + "making team jump away...");
					Delay(500);
					if(d2B_usingAFollower && !InTown()) d2B_msg("zonjavs " + Random(1,134332));
					break;
				case 221:			// "]": chant team 
					var t;
					Print(COLOR_2 + "chanting team...");	
					Delay(500);
					(InTown()) ? t = true : t = false;
					d2B_chant(t);
					break;
			}
			break;
		case 1:						// main customized keycode menu
			d2B_KeyCodeMain(keycode);
			break;
		case 2:						// baal customized manual key menu
			switch(keycode) {
				case 46:			// [del] button (orig: Key_ExitGame)
					ExitGame();
					break;
				case 96:			// #pad 0: exit game (orig: Key_DoPrecast)
					ExitGame();
					break;
				case Key_AntiIdle: // [pause/break] button
					_keycodeMenu = _keycodeMenu + 1;
					if(_keycodeMenu > 7) _keycodeMenu = 0;
					Print(COLOR_2 + "Customized key menu: " + COLOR_5 + _keycodeMenu + " - " + COLOR_4 + "rushing customized manual key menu");
					break;
				case 103:			// #pad 7: grab exp shrine (orig:Key_MyChicken)
					if(!InTown(me)) {
						Print(COLOR_2 + "Looking for exp shrine...");
						Delay(500);
						NTP_DoPrecast(true);
						Delay(500);
						d2B_LXPC_FindShrines(true);
					}
					break; 
				case 104:			// #pad 8: enable/disable pickit (orig: Key_DPSMeter)
					MGConfig_PickItems ? (MGConfig_PickItems = false) : (MGConfig_PickItems = true);
					MGConfig_PickAuto ? (MGConfig_PickAuto = false) : (MGConfig_PickAuto = true);
					Print(COLOR_2 + "MGConfig_PickItems" + COLOR_5 + MGConfig_PickItems);
					Delay(Random(1000,1700));
					Print(COLOR_5 + "MGConfig_PickAuto" + COLOR_2 + MGConfig_PickAuto);
					break;
				case 105:			// #pad 9: enter throne blue portal then move to safe spot (orig: Key_CursoriLvL)
					if(me.areaid == 109) {					// 109: Harrogoth
						NTTM_TownMove("portalspot");
						NTM_UsePortal("BluePortal", 131);	// 131: throne room
						Delay(300);
						if(me.areaid == 131) NTM_MoveTo(131, 15113, 5053);		// moves to safe spot for lvling
						NTP_DoPrecast(true);
					}
					break;
				case 102:			// #pad 6: (orig: Key_Refresh)
					if(me.areaid == 131) {
						NTM_MoveTo(131, 15092, 5010);			// moves to entrance to worldstone chamber
						NTP_DoPrecast(true);
						for(var i = 0; i < 60; i++) {			// wait for baal to enter chamber
							Delay(500);
							if(!NTC_FindUnit(NTC_UNIT_MONSTER, 543)) break;
						}
						_portal = NTC_FindUnit(NTC_UNIT_OBJECT, 563, 1);
						NTM_UsePortal("Portal", 132, null, _portal);	// enter into worldstone chamber
						NTM_MoveTo(me.areaid, 15138, 5899);				// tele near baal (orig: 15138, 5916)
						//NTA_KillMonster(544);							// kill baal
					}
					break;
				case 101:	// #pad 5: (orig: )
					if(!InTown(me)) {
						NTM_MakeTP();
						d2B_msg("-");
					}
					break;
				case 100:	// #pad 4: (orig: )
					if(InTown(me)) {
						if(me.areaid == 103) d2B_msg("ummm 5");
						else if(me.areaid == 109) d2B_msg("ummm 4");
					}
					if(InTown(me)) {
						if(_follow) {
							_follow = false;
							d2B_msg("..");
						}
						else if(!_follow) {
							_follow = true;
							d2B_msg(".");
						}
					}
					break;
			}
			break;
		case 3:						// rushing customized manual key menu
			switch(keycode) {
				case 46:			// [del] button (orig: Key_ExitGame)
					ExitGame();
					break;
				case 96:			// #pad 0: exit game (orig: Key_DoPrecast)
					ExitGame();
					break;
				case Key_AntiIdle: // [pause/break] button
					_keycodeMenu = _keycodeMenu + 1;
					if(_keycodeMenu > 7) _keycodeMenu = 0;
					Print(COLOR_2 + "Customized key menu: " + COLOR_5 + _keycodeMenu + " - " + COLOR_4 + "experimental hopping barbs menu...");
					break;
				case 104:			// #pad 8: enable/disable pickit (orig: Key_DPSMeter)
					MGConfig_PickItems ? (MGConfig_PickItems = false) : (MGConfig_PickItems = true);
					MGConfig_PickAuto ? (MGConfig_PickAuto = false) : (MGConfig_PickAuto = true);
					Print(COLOR_2 + "MGConfig_PickItems" + COLOR_5 + MGConfig_PickItems);
					Delay(Random(1000,1700));
					Print(COLOR_5 + "MGConfig_PickAuto" + COLOR_2 + MGConfig_PickAuto);
					break;
				case 103:			// #pad 7: grab exp shrine (orig:Key_MyChicken)
					if(!InTown(me)) {
						Print(COLOR_2 + "Looking for exp shrine...");
						Delay(500);
						NTP_DoPrecast(true);
						Delay(500);
						d2B_LXPC_FindShrines(false);
					}
					break; 
			// throne thingies
				case 191:		// / forward slash
					if(me.areaid == 131) {	// while in the Throne of Destroction: msg to bots
						NTM_MoveTo(me.areaid, 15118, 5046);
						NTM_MakeTP();
						Delay(200);
						if(d2B_usingAFollower) d2B_msg("-"); // "-" for enabling follow bots to follow
						break;
					}
					if(me.areaid == 132) {	// while in the Throne of Destroction: msg to bots
						NTM_MoveTo(me.areaid, 15193, 5933);
						NTM_MakeTP();
						Delay(200);
						if(d2B_usingAFollower) d2B_msg("-"); // "-" for enabling follow bots to follow
						break;
					}
					
			// act i
				case 97:			// #pad 1: den of evil, clearing worldstone levels
					if(me.areaid == 1 || me.areaid == 2) {
						Print(COLOR_2 + "going for corpsefire");
						if(me.areaid == 1) {
							d2B_moveWP();
							d2B_gotoWP(3);
						}
						NTP_DoPrecast(true);
						Delay(300);
						d2B_moveToStair(2,8);							// head to front of den as a starting point
						Delay(750);
						NTM_TakeStair(8);
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 774, 15, -15);	// 774: Corpsefire
					}
					if(me.areaid >= 128 && me.areaid <= 131) {			// if at ws1, ws2, ws3, or throne clear level
						clearpath = true;
						if(me.areaid == 128) {
							NTM_MoveToStair(me.areaid, 129,0,0,clearpath);
							NTM_MoveToStair(me.areaid, 120,0,0,clearpath);
							NTM_MoveToStair(me.areaid, 129,0,0,clearpath);
							NTM_TakeStair(129);
							Delay(Random(1000,1500));
						}
						if(me.areaid == 129) {
							NTM_MoveToStair(me.areaid, 130,0,0,clearpath);
							NTM_MoveToStair(me.areaid, 128,0,0,clearpath);
							NTM_MoveToStair(me.areaid, 130,0,0,clearpath);
							NTM_TakeStair(130);
							Delay(Random(1000,1500));
						}
						if(me.areaid == 130) {
							NTM_MoveToStair(me.areaid, 131,0,0,clearpath);
							NTM_MoveToStair(me.areaid, 129,0,0,clearpath);
							NTM_MoveToStair(me.areaid, 131,0,0,clearpath);
							NTM_TakeStair(131);
							Delay(Random(1000,1500));
						}	
					}
					break;
				case 98:			// #pad 2: cain
					if(InTown(me)) {						// from town going for treehead
						Print(COLOR_2 + "going for treehead");
						d2B_moveWP();
						d2B_gotoWP(5);
						NTP_DoPrecast(true);
						Delay(200);
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 30, 5, 5);
						NTM_MakeTP();
						break;
					}
					if(!InTown() && me.areaid == 5) {		// from tree going to cairn stones
						Print(COLOR_2 + "going for cairn stones");
						if(!InTown() && me.areaid != 4) {
							d2B_NTTM_CheckAct(1);
							d2B_moveWP();
							d2B_gotoWP(4);
							NTP_DoPrecast(true);
							Delay(200);
							NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 737, 10, -10);
							Delay(300);
							NTM_MakeTP();
						}
						break;
					}
					if(me.areaid == 4) {					// from cairn stones to cain in tristram
						Print(COLOR_2 + "going for cain");
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 737);
						Dekay(Random(1200,2000));
						NTM_UsePortal("Portal", 38);										// 38:	 Cain Stones portal
						Delay(Random(1300,1500));
						NTM_MoveTo(38, 25133, 5139);										// go right to where Cain is hanging in tristram
						Delay(300);
						NTM_MakeTP();
					}
					break;
				case 99:			// #pad 3: andy
					if(me.areaid == 37) {
						NTM_MoveTo(me.areaid, 22545, 9517);	// wall: right: 22563, 9556 | left: 22532, 9553 | very close: 22547, 9547 | 22545, 9517: towards the back where the rogues hang
						break;
					}
					Print(COLOR_2 + "going for andy");
					if(!InTown()) d2B_NTTM_CheckAct(1);			// Andarial
					d2B_moveWP();
					d2B_gotoWP(35);
					NTP_DoPrecast(true);
					Delay(750);
					for (i = 0; i < 2; i++) {
						NTM_MoveToStair(me.areaid, 36 + i);
						NTM_TakeStair(36 + i);
						Delay(Random(1000,1200));
					}
					NTM_MakeTP();
					break;
			//act ii
				case 100:			// #pad 4: radamant
					Print(COLOR_2 + "going for radament");
					if(!InTown() && me.areaid != 48) d2B_NTTM_CheckAct(43);
					if(InTown(me)) {
						d2B_moveWP();
						d2B_gotoWP(48);
					}
					if(me.areaid == 48) {
						NTP_DoPrecast(true);
						Delay(750);
						d2B_moveToStair(me.areaid, 49);
						NTM_TakeStair(49);
						Delay(Random(750,1000));
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 355, 10, -10);		// 355: chest near to Radament
					}
					break;	
				case 101:			// #pad 5: cube,staff,ammy,summoner,duir,tyrael
					if(!InTown() && me.areaid != 57 && me.areaid != 60 && me.areaid != 43 && me.areaid != 64 && me.areaid != 44 && me.areaid != 61 && me.areaid != 74 && me.areaid != 46 && me.areaid !=73) d2B_NTTM_CheckAct(43);
					if(InTown(me) || me.areaid == 57) {										// cube
						Print(COLOR_2 + "going for cube");
						if(InTown(me)) {
							d2B_moveWP();
							d2B_gotoWP(57);
						}
						NTP_DoPrecast(true);
						d2B_moveToStair(me.areaid, 60);
						NTM_TakeStair(60);
						Delay(Random(750,1000));
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 354, -5, -5);
						NTM_MakeTP();
						break;
					}
					if(me.areaid == 60 || me.areaid == 43) {				// staff
						Print(COLOR_2 + "going for staff");
						if(me.areaid == 60) {
							d2B_NTTM_CheckAct(43);
							d2B_moveWP();
							d2B_gotoWP(43);
						}
						NTP_DoPrecast(true);
						for (i = 0; i < 3; i += 1) {
							d2B_moveToStair(me.areaid, 62+i);
							NTM_TakeStair(62+i);
							Delay(Random(750,1000));
						}	
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 356, -5, -5);
						NTM_MakeTP();
						break;
					}
					if(me.areaid == 64 || me.areaid == 44) {				// amulet
						Print(COLOR_2 + "going for amulet");
						if(me.areaid == 64) {
							d2B_NTTM_CheckAct(43);
							d2B_moveWP();
							d2B_gotoWP(44);
						}
						NTP_DoPrecast(true);
						d2B_moveToStair(45, 58);
						NTM_TakeStair(58);
						Delay(Random(750,1000));
						d2B_moveToStair(me.areaid, 61);
						NTM_TakeStair(61);
						Delay(300);
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 149, +4, -8);
						NTM_MakeTP();
						break;
					}
					if(me.areaid == 61 || me.areaid == 74) {				// summoner
						Print(COLOR_2 + "going for summoner");
						if(me.areaid == 61) {
							d2B_NTTM_CheckAct(43);
							d2B_moveWP();
							d2B_gotoWP(74);
						}
						NTP_DoPrecast(true);
						Delay(750);
						
						var _object = GetPresetUnits(me.areaid);
						for(var i = 0; i < _object.length; i++) {
							if(_object[i].id == 357) {
								if(_object[i].x == 11 && _object[i].y == 11) NTM_MoveTo(me.areaid,  25450, 5030);
								else if(_object[i].x == 26 && _object[i].y == 11) NTM_MoveTo(me.areaid,  25863, 5449);
								else if(_object[i].x == 11 && _object[i].y == 21) NTM_MoveTo(me.areaid,  25445, 5869);
								else NTM_MoveTo(me.areaid,  25023, 5449);
							}
						}
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 357, 2, 2);		// 357: the journal stand beside Summoner	
						break;
					}
					if(me.areaid == 46) {				// duri
						Print(COLOR_2 + "going for duri");
						if(me.areaid == 74) {
							d2B_NTTM_CheckAct(43);
							d2B_moveWP();
							d2B_gotoWP(46);
						}
						NTP_DoPrecast(true);
						Delay(750);
						_tombs = GetRoom();
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_TILE, _tombs.correcttomb-28);
						_unit = NTC_FindUnit(NTC_UNIT_TILE, _tombs.correcttomb-28, 5);
						NTM_TakeStair(_unit.subareaid);
						Delay(Random(300,500));
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 152, -2, 2);
						NTC_FindUnit(NTC_UNIT_OBJECT, 100, 10);
						NTM_TakeUnit(NTC_UNIT_OBJECT, 100);
						NTM_MakeTP();
						break;
					}
					if(me.areaid == 73) {				// make a tp by tyrael
						Print(COLOR_2 + "going for tyrael");
						var _npc;
						var px = [22579,22576,22577];
						var py = [15660,15638,15593];
						var bx = [22632,22621,22609,22592,22579, 22579];
						var by = [15708,15710,15707,15706,15704, 15690];
							
						for(var i = 0 ; i < bx.length ; i += 1){
							NTM_WalkTo(bx[i], by[i]);
						}
						
						for(var i = 0 ; i < px.length ; i += 1){
							NTM_WalkTo(px[i], py[i]);
						}
						
						_npc = NTC_FindUnit(NTC_UNIT_NPC, GetLocaleString(1013), 5);
						if(_npc){
							if(GetDistance(me, _npc) > 2)
								NTM_WalkTo(_npc.x, _npc.y-3);
						}
						d2B_NTTM_CheckAct(43);
						d2B_moveWP();
						d2B_gotoWP(52);
						NTM_MoveToStair(52, 51);
						NTM_TakeStair(51, false);
						Delay(1000);
						NTM_MoveToStair(51, 50);
						NTM_TakeStair(50, false);
						Delay(1000);
						if(!NTM_MoveTo(50, 10015, 5047)) break;
						d2B_NTTM_CheckAct(43);
						d2B_moveWP();
						d2B_gotoWP(75);
						break;
					}
					break;
				case 102:			// #pad 6: khalim's eye, brain, heart
					if(InTown(me) || (me.areaid != 76 && me.areaid != 85 && me.areaid != 91)) {
						d2B_NTTM_CheckAct(75);
						d2B_moveWP();
						d2B_gotoWP(76);
						Print(COLOR_2 + "going for the eye");
						NTP_DoPrecast(true);
						NTM_MoveToStair(me.areaid, 85);
						NTM_TakeStair(85);
						Delay(300);
						NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 407);
						break;
					}	
					if(me.areaid == 85 || me.areaid == 78) {					// brain
						if(me.areaid == 85) {
							d2B_NTTM_CheckAct(75);
							d2B_moveWP();
							d2B_gotoWP(78);
						}
						Print(COLOR_2 + "going for the brain");
						NTP_DoPrecast(true);
						NTM_MoveToStair(78, 88);
						NTM_TakeStair(88);
						Delay(Random(750,1000));
						NTM_MoveToStair(88, 89);
						NTM_TakeStair(89);
						Delay(Random(750,1000));
						NTM_MoveToStair(89, 91);
						NTM_TakeStair(91);
						Delay(300);
						NTM_MoveToPresetUnit(91, NTC_UNIT_MONSTER, 756, -3, 8);
						NTM_MakeTP();
						break;
					}
					if(me.areaid == 91 || me.areaid == 80 || me.areaid == 81) {	// Khalim's heart
						if(me.areaid == 91) {
							d2B_NTTM_CheckAct(75);
							d2B_moveWP();
							d2B_gotoWP(80);
						}
						Print(COLOR_2 + "going for the heart");
						NTP_DoPrecast(true);
						if(me.areaid == 80) NTM_MoveToStair(80,92);
						if(me.areaid == 81) NTM_MoveToStair(81,92);
						NTM_TakeStair(92);
						Delay(Random(750,1000));
						NTM_MoveToStair(92,93);
						NTM_TakeStair(93);
						break;	
					}
			}
			break;
		case 4:						// this one is a experiment for hop barbs
			switch(keycode) {
				case 46:			// [del] button (orig: Key_ExitGame)
					ExitGame();
					break;
				case 96:			// #pad 0: exit game (orig: Key_DoPrecast)
					ExitGame();
					break;
				case Key_AntiIdle: // [pause/break] button
					_keycodeMenu = _keycodeMenu + 1;
					if(_keycodeMenu > 7) _keycodeMenu = 0;
					Print(COLOR_2 + "Customized key menu: " + COLOR_5 + _keycodeMenu + " - " + COLOR_4 + "cntrling manual bots for rushing..");
					break;
				case 104:			// #pad 8: enable/disable pickit (orig: Key_DPSMeter)
					MGConfig_PickItems ? (MGConfig_PickItems = false) : (MGConfig_PickItems = true);
					MGConfig_PickAuto ? (MGConfig_PickAuto = false) : (MGConfig_PickAuto = true);
					Print(COLOR_2 + "MGConfig_PickItems" + COLOR_5 + MGConfig_PickItems);
					Delay(Random(1000,1700));
					Print(COLOR_5 + "MGConfig_PickAuto" + COLOR_2 + MGConfig_PickAuto);
					break;
				case 97:			// #pad 1: for throne hopping by stairs barb
				case 98:			// #pad 2: for throne hopping in place barb
					Print(COLOR_2 + "enable/disable throne hopping barb");
					if(InTown(me)) break;	
					Delay(300);
					_barbHop == true ? _barbHop = false : _barbHop = true;
					if(keycode == 97 && me.areaid == 131) {
						if(!NTM_MoveTo(131, 15095, 5022)) {
							NTM_MoveTo(131, 15118, 5051); // if(!NTM_MoveTo(131, 15095, 5022) || !NTC_PutSkill(132, NTC_HAND_RIGHT)
						}
					}
					var meX = me.x;
					var meY = me.y;
					while(_barbHop) {
						NTC_CastSkill(132, NTC_HAND_RIGHT, meX, meY);
						Delay(Random(100, 150));
					}
					break;
				case 99:			// #pad 3: 	if out of town:	msg to hop barb followers to start hopping
									//			if in town: 	msg to hop barb followers to go to a5
					if(!InTown()) {
						Print(COLOR_2 + "enable hopping barb followers");	
						Delay(300);
						if(d2B_usingAFollower) d2B_msg("hop on " + Random(1,134332));
						break;
					}
					if(InTown()) {
						Print(COLOR_2 + "tell hoppers to go to a5");	
						Delay(300);
						if(d2B_usingAFollower) d2B_msg("ummm 5 " + Random(1,134332));
						break;
					}
					break;
				case 102:			// #pad 6: 	if out of town:	msg to hop barb followers tomsg to stop hopping
									//			if in town: 	msg to hop barb followers to go to a4
					if(!InTown()) {
						Print(COLOR_2 + "disable hopping barb followers");	
						Delay(300);
						if(d2B_usingAFollower) d2B_msg("hop off " + Random(1,134332));
						break;
					}
					if(InTown()) {
						Print(COLOR_2 + "tell hoppers to go to a4");	
						Delay(300);
						if(d2B_usingAFollower) d2B_msg("ummm 4 " + Random(1,134332));
						break;
					}
					break;
				case 101:			// #pad 5: msg "'" to send peeps to town
					Print(COLOR_2 + "send hopping barb followers to town");
					if(InTown(me)) break;	
					Delay(300);
					if(d2B_usingAFollower) d2B_msg("' " + Random(1,134332));
					break;
				case 100:			// #pad 4: msg "." to call peeps to me
					Print(COLOR_2 + "call hopping barb followers to come");
					if(InTown(me)) break;	
					Delay(300);
					if(d2B_usingAFollower) d2B_msg(". " + Random(1,134332));
					break;
			}
			break;
		case 5:						// this one is for rushing new characters. Pressing assigned keys sends manual bots to interact with NPCs
									// as well as to grab quests, move to the following acts, grab wps, and other thingies
			d2B_noobRushCtrls(keycode);
			break;
		case 6:						// this is for exploring and testing team arrays and their usage
			switch(keycode) {
				case 46:			// [del] button (orig: Key_ExitGame)
					ExitGame();
					break;
				case 96:			// #pad 0: exit game (orig: Key_DoPrecast)
					ExitGame();
					break;
				case Key_AntiIdle: // [pause/break] button
					_keycodeMenu = _keycodeMenu + 1;
					if(_keycodeMenu > 7) _keycodeMenu = 0;
					Print(COLOR_2 + "Customized key menu: " + COLOR_5 + _keycodeMenu + " - " + COLOR_4 + "quick lvling of flwrs in chaos & throne...");
					break;
				case 97:			// #pad 1: store and then display the list of players in game
					d2B_storePlayerNames();
					break;
				case 98:			// #pad 2: compare present team members with those from start of game	
					d2B_comparePlayerNames();
					break;
				case 99:			// #pad 3: individually instruct the sorcs to complete 
					d2B_teamInstructions();
					break;
			}
			break;
		case 7:						// this is for hi-lvl toon control
			switch(keycode) {
				case 46:			// [del] button (orig: Key_ExitGame) for listing key settings
					d2B_keySettings(7);
					break;
				case 96:			// #pad 0: exit game (orig: Key_DoPrecast)
					ExitGame();
					break;
				case Key_AntiIdle:	// [pause/break] button
					_keycodeMenu = _keycodeMenu + 1;
					if(_keycodeMenu > 7) _keycodeMenu = 0;
					Print(COLOR_2 + "Customized key menu: " + COLOR_5 + "main control menu...");
					break;
				case 104:			// #pad 8: enable/disable pickit (orig: Key_DPSMeter)
					MGConfig_PickItems ? (MGConfig_PickItems = false) : (MGConfig_PickItems = true);
					MGConfig_PickAuto ? (MGConfig_PickAuto = false) : (MGConfig_PickAuto = true);
					Print(COLOR_2 + "MGConfig_PickItems" + COLOR_5 + MGConfig_PickItems);
					Delay(Random(1000,1700));
					Print(COLOR_5 + "MGConfig_PickAuto" + COLOR_2 + MGConfig_PickAuto);
					break;
				
				case 97:			// #pad 1: refill, goto river wp, make a tp and wait for team
					Print(COLOR_2 + "refill, goto river wp, make a tp and wait for team...");
					if(InTown()) {	
						NTTMGR_TownManager();			// refill
						NTTM_TownMove("portalspot");
						d2B_commonInitSetup(107);		// river wp
					}
					if(me.areaid == 107) {
						var x_tmp = Random(0,6) - 3;
						var y_tmp = Random(0,6) - 3;
						NTM_MoveTo(me.areaid, 7813 + x_tmp, 5918 + y_tmp);
					}
					NTM_MakeTP();
					Delay(Random(750,1500));
					Say(". " + Random(1,134332));
					break;
				case 98:			// #pad 2: msg "." sending peeps to town
					Print(COLOR_2 + "sending followers to town...");
					if(InTown(me)) break;	
					NTM_MakeTP();
					Delay(Random(750,1500));
					Say("' " + Random(1,134332));
					break;
				case 99:			// #pad 3: signal team to do a little jump, if leader is stuck by the team's closeness
					Print(COLOR_2 + "signalling team to jump away...");
					Delay(500);
					Say("j " + Random(1,134332));
					break;
			}
			break;
	}
}

function d2B_KeyCodeMain(keycode) {
	switch(keycode) {
		case 19:									// 19: Key_AntiIdle | scrolling thru keypad menus
			_keycodeMenu = _keycodeMenu + 1;
			if(_keycodeMenu > 7) _keycodeMenu = 0;
			Print(COLOR_2 + "Customized key menu: " + COLOR_5 + _keycodeMenu + " - " + COLOR_4 + "Baal customized keypad...");
			Delay(Random(1000,1200));
			break;
		case 104:									// number pad #8 | pickit enable/disable
			MGConfig_PickItems ? (MGConfig_PickItems = false) : (MGConfig_PickItems = true);
			MGConfig_PickAuto ? (MGConfig_PickAuto = false) : (MGConfig_PickAuto = true);
			Print(COLOR_2 + "MGConfig_PickItems" + COLOR_5 + MGConfig_PickItems);
			Delay(Random(300,700));
			Print(COLOR_5 + "MGConfig_PickAuto" + COLOR_2 + MGConfig_PickAuto);
			break;
		//	____________________________________________
		//
		case 219:										// [ open bracket 
			if(busy || _keyExtras)
				return Print(COLOR_1 + "Not now...");
		//
		// act i
			// corpsefire
			if(me.areaid == 1) {
				Print(COLOR_2 + "going for corpsefire");
				d2B_moveWP();
				d2B_gotoWP(3);
				NTP_DoPrecast(true);
				d2B_moveToStair(2,8);					// head to front of den as a starting point
				d2B_takeStairs(8, false);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 774, 15, -15);	// 774: Corpsefire
				if(d2B_usingAFollower) d2B_team(true);
				//d2B_teamPro(true,3319,40,true,1,"n w",false);						// 3319: Corpsefire
				break;
			}
			// tree head
			if(me.areaid == 5) {
				Print(COLOR_2 + "going for tree head");
				NTP_DoPrecast(true);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 30, 15, -15);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			// cairn stones
			if(me.areaid == 4) {
				Print(COLOR_2 + "going for cairn stones");
				NTP_DoPrecast(true);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 737, 15, -15);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			// horadric malus
			if(me.areaid == 27) {
				Print(COLOR_2 + "going for horadric malus");
				NTP_DoPrecast(true);
				NTM_MoveToPresetUnit(28, NTC_UNIT_MONSTER, 754, -5, 5);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
		//
		// actII
			// Radament
			if(me.areaid == 40) {	
				Print(COLOR_2 + "going for radament");
				d2B_moveWP();
				d2B_gotoWP(48);
				NTP_DoPrecast(true);
				d2B_moveToStair(me.areaid, 49);
				d2B_takeStairs(49, true);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 355, 10, -10);		// 355: chest near to Radament
				if(d2B_usingAFollower) d2B_team(true);
				//d2B_teamPro(true,2879,40,true,2,"n w",false);						// 2879: Radament
				break;
			}
			// make a tp in harem
			if(me.areaid == 52) {	
				Print(COLOR_2 + "going to make a tp in the harem");
				NTP_DoPrecast(true);
				for(i=51;i>=50;i--) {
					d2B_moveToStair(me.areaid, i, false);
					d2B_takeStairs(i, false);
				}
				d2B_moveToStair(me.areaid, 40, false);
				NTM_MakeTP();
				Delay(200);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			// cube
			if(me.areaid == 57) {
				Print(COLOR_2 + "going for cube");
				NTP_DoPrecast(true);
				d2B_moveToStair(me.areaid, 60);
				d2B_takeStairs(60, false);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 354, -5, -5);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			// staff
			if(me.areaid == 43) {
				Print(COLOR_2 + "going for staff");
				NTP_DoPrecast(true);
				for (i = 0; i < 3; i += 1) {
					d2B_moveToStair(me.areaid, 62+i);
					d2B_takeStairs(62+i, false);
					Delay(Random(750,1000));
				}	
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 356, -5, -5);
				if(d2B_usingAFollower) d2B_team(true);
				break;	
			}
			// amulet
			if(me.areaid == 44) {
				Print(COLOR_2 + "going for amulet");
				NTP_DoPrecast(true);
				d2B_moveToStair(45, 58);
				d2B_takeStairs(58, false);
				d2B_moveToStair(me.areaid, 61);
				d2B_takeStairs(61, false);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 149, +4, -8);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			/*if(me.areaid == 73) {	// duriel's lair
				Print(COLOR_2 + "going to make a tp at Tyrael"); // const NTC_NPC_ID_TYRAEL_ACT_2 = 251;
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 149, +4, -8);
				if(d2B_usingAFollower) d2B_team(true);
			}*/
		//		
		// actIII
			// Khalim's eye
			if(me.areaid == 76) {	
				Print(COLOR_2 + "going for the eye");
				NTP_DoPrecast(true);
				d2B_moveToStair(76, 85);
				d2B_takeStairs(85, false);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 407)
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			// Khalim's brain
			if(me.areaid == 78) {	
				Print(COLOR_2 + "going for the brain");
				NTP_DoPrecast(true);
				d2B_moveToStair(78, 88);
				d2B_takeStairs(88, false);
				Delay(Random(750,1000));
				d2B_moveToStair(88, 89);
				d2B_takeStairs(89, false);
				Delay(Random(750,1000));
				d2B_moveToStair(89, 91);
				d2B_takeStairs(91, false);
				NTM_MoveToPresetUnit(91, NTC_UNIT_MONSTER, 756, -3, 8);
				if(d2B_usingAFollower) d2B_team(true);	
				break;
			}
			// Khalim's heart
			if(me.areaid == 80) {	// Khalim's heart
				Print(COLOR_2 + "going for the heart");
				NTP_DoPrecast(true);
				d2B_moveToStair(80,92);
				d2B_takeStairs(92, false);
				Delay(Random(750,1000));
				d2B_moveToStair(92,93);
				d2B_takeStairs(93, false);
				if(d2B_usingAFollower) d2B_team(true);
				break;	
			}
			// Stormtree
			if(me.areaid == 75) {	
				Print(COLOR_2 + "going for stormtree");
				d2B_moveWP();
				d2B_gotoWP(79);
				NTP_DoPrecast(true);
				Delay(750);
				NTM_MoveToPresetUnit(78, NTC_UNIT_MONSTER, 757, 10, -10);			// 757: Stormtree
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			// Act III tome
			if(me.areaid == 80) {
				Print(COLOR_2 + "going for tome");
				NTP_DoPrecast(true);
				d2B_moveToStair(me.areaid, 94);
				d2B_takeStairs(94, false);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 193);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
		//
		// actIV
			// Hephasto
			if(me.areaid == 103) {	
				Print(COLOR_2 + "going for hephasto");
				d2B_moveWP();
				d2B_gotoWP(107);
				NTP_DoPrecast(true);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 376);				// area near to Hephasto
				//NTM_MoveToPresetUnit(78, NTC_UNIT_MONSTER, 757, 10, -10);			// 757: Stormtree
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
		//
		// actV
			// Pit of Acheron run
			if(me.areaid == 112) {
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT,60); // enterance of Pit
				NTM_TakeUnit(NTC_UNIT_OBJECT,60);
				NTP_DoPrecast(true);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 397);
				
				var _chest;
				_chest = NTC_FindUnit(NTC_UNIT_OBJECT, GetLocaleString(3260));
				if(_chest){
					if(NTC_OpenChest(_chest))
						NTSI_PickItems();
				}
				break;
			}
			// anya
			if(me.areaid == 113) {
				Print(COLOR_2 + "going for anya");
				NTP_DoPrecast(true);
				d2B_moveToStair(me.areaid, 114);
				d2B_takeStairs(114, false);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 460, -8, -8);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			// ancients
			if(me.areaid == 118) {	
				Print(COLOR_2 + "going for ancients");
				NTP_DoPrecast(true);
				d2B_moveToStair(me.areaid, 120);
				d2B_takeStairs(120, false);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			// Throne
			if(me.areaid == 109) {	
				Print(COLOR_2 + "going for the throne");
				d2B_moveWP();
				d2B_gotoWP(129);	// ws2
				NTP_DoPrecast(true);
				d2B_moveToStair(me.areaid, 130);
				d2B_takeStairs(130, false);	// ws3
				d2B_moveToStair(me.areaid, 131);
				d2B_takeStairs(131, false);	// ws4
				
				NTM_MoveTo(me.areaid, 15118, 5051);				// safe: 15118, 5051 | centre: 15094, 5039 | orig(15112, 5068, 1, true)
				NTM_MakeTP();
			
				if(_dollChk) {
					if(d2B_dollsoulChk()) {
					_dollSoul = true;
					return;
					}
					Delay(100);
					if(d2B_dollsoulChk()) {
					_dollSoul = true;
					return;
					}
				}
				if(_dollSoul) break;
				_dollSoul = false;
				break;
			}
			// while in the Throne of Destroction: msg to bots
			if(me.areaid == 131) {
				NTM_MoveTo(me.areaid, 15118, 5046);
				NTM_MakeTP();
				Delay(200);
				if(d2B_usingAFollower) d2B_msg("."); // "." for enabling follow bots to follow
				break;
			}
			// while in the Worldstone Chamber: msg to bots
			if(me.areaid == 132) {
				NTM_MoveTo(me.areaid, 15193, 5930);
				NTM_MakeTP();
				Delay(200);
				if(d2B_usingAFollower) d2B_msg("."); // "." for enabling follow bots to follow
				break;
			}
			break;
		//	____________________________________________
		//
		case 221:										// ] close bracket 
			if(busy || _keyExtras) return Print(COLOR_1 + "Not now...");
			
			// msg to bots to head to town	
			if(me.areaid == 131 || me.areaid == 132) {
				if(d2B_usingAFollower) d2B_msg("'");
				break;
			}
		//
		// act i
			// Bishibosh
			if(me.areaid == 1) {	
				Print(COLOR_2 + "going for bishibosh");
				d2B_moveWP();
				d2B_gotoWP(3);
				NTP_DoPrecast(true);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 734, 15, -15);	// 734: Bishibosh
				if(d2B_usingAFollower) d2B_team(true);
				//d2B_teamPro(true,2869,40,true,1,"n w",false);						// 2869: Bishibosh 
				return;
			}
		//
		// act ii
			// Summoner
			if(me.areaid == 40) {	
				Print(COLOR_2 + "going for summoner");
				d2B_moveWP();
				d2B_gotoWP(74);
				NTP_DoPrecast(true);
				
				var _object = GetPresetUnits(me.areaid);
				for(var i = 0; i < _object.length; i++) {
					if(_object[i].id == 357) {
						if(_object[i].x == 11 && _object[i].y == 11) NTM_MoveTo(me.areaid,  25450, 5030);
						else if(_object[i].x == 26 && _object[i].y == 11) NTM_MoveTo(me.areaid,  25863, 5449);
						else if(_object[i].x == 11 && _object[i].y == 21) NTM_MoveTo(me.areaid,  25445, 5869);
						else NTM_MoveTo(me.areaid,  25023, 5449);
					}
				}
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 357, 2, 2);		// 357: the journal stand beside Summoner
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
		//
		// act iii
			// Bremm Sparkfist
			if(me.areaid == 75) {	
				Print(COLOR_2 + "going for bremm sparkfist");
				d2B_moveWP();
				d2B_gotoWP(83);
				NTP_DoPrecast(true);
				
				_waypoint = NTC_FindUnit(NTC_UNIT_OBJECT, GetLocaleString(22526), 5);
				_deltax = _waypoint.x - 5699;
				_deltay = _waypoint.y - 1584;
				NTM_MoveTo(me.areaid, 5780+_deltax, 1555+_deltay);
				NTM_MoveTo(me.areaid, 5157, 1833);
				
				//NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 762, 10, -10);	//	762: Brem Sparkfist
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
		//
		// act iv
			// Izual
			if(me.areaid == 103) {	
				Print(COLOR_2 + "going for izual");
				d2B_moveWP();
				d2B_gotoWP(106);
				NTP_DoPrecast(true);
				
				var _izzy = GetPresetUnits(105, NTC_UNIT_MONSTER, 256);
				NTM_MoveTo(me.areaid, _izzy[0].roomx*5+_izzy[0].x, _izzy[0].roomy*5+_izzy[0].y);
				
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			break;
		//	____________________________________________
		//
		case 220:										// \ backslash
			if(busy || _keyExtras)
				return Print(COLOR_1 + "Not now...");
		//
		// act i
			// Griswold
			if(me.areaid == 1) {	
				Print(COLOR_2 + "going for griswold");
				d2B_moveWP();
				d2B_gotoWP(4);
				NTP_DoPrecast(true);
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 737, 10, 10);		// 737:	 Rakanishu
				NTM_UsePortal("Portal", 38);										// 38:	 Cain Stones portal
				Delay(Random(300,500));
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 739, 10, 10);		// 739:	 Griswold
				if(d2B_usingAFollower) d2B_team(true);
				//d2B_teamPro(true,2874,40,true,1,"n w",false);						// 2874: Griswold
				break;
			}
		//
		// act ii
			// Duriel
			if(me.areaid == 40) {	
				Print(COLOR_2 + "going for duriel");
				d2B_moveWP();
				d2B_gotoWP(46);
				NTP_DoPrecast(true);
				_tombs = GetRoom();
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_TILE, _tombs.correcttomb-28);
				_unit = NTC_FindUnit(NTC_UNIT_TILE, _tombs.correcttomb-28, 5);
				NTM_TakeStair(_unit.subareaid);
				Delay(Random(300,500));
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 152, -2, 2);
				NTC_FindUnit(NTC_UNIT_OBJECT, 100, 10);
				NTM_TakeUnit(NTC_UNIT_OBJECT, 100);
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
		//
		// act iii
			// Meph
			if(me.areaid == 75) {	
				Print(COLOR_2 + "going for meph");
				d2B_moveWP();
				d2B_gotoWP(101);
				NTP_DoPrecast(true);
				
				d2B_moveToStair(me.areaid, 102);
				d2B_takeStairs(102, false);
				Delay(Random(300,500));
				NTM_MoveTo(me.areaid, 17564, 8069);							// time for Mpeh
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
			// Chaos centre
			if(me.areaid == 103) {	
				Print(COLOR_2 + "going for chaos ctr");
				d2B_moveWP();
				d2B_gotoWP(107);
				NTP_DoPrecast(true);
				
				NTM_MoveTo(108, 7794, 5292);	// tele to the ctr
				if(d2B_usingAFollower) d2B_team(true);
				break;
			}
		//
		// act v
			// throne room
			if(me.areaid == 131) {
				Print(COLOR_2 + "clearing throne");
				d2B_throneWaves();
				break;
			}
			break;
		//	____________________________________________
		//
		case 222:										// ' single quote
			if(busy || _keyExtras)
				return Print(COLOR_1 + "Not now...");
		//
		// act i
			// Countess
			if(me.areaid == 1 || me.areaid == 5) {
				int _cnt = true;
				if(me.areaid == 5) _cnt = false;
				Print(COLOR_2 + "going for countess");
				d2B_moveWP();
				d2B_gotoWP(6);
				NTP_DoPrecast(true);
				for(var i = 0 ; i < 6 ; i++) {
					d2B_moveToStair(me.areaid,20+i);	// go to the forgotten tower and do tower things
					d2B_takeStairs(20+i, false);
					Delay(Random(1000,1200));
					if(i==5) {
						_cnt ? d2B_countess(true) : d2B_countess(false);
					}
				}
				break;
			}
			if(me.areaid == 40) {	//
				Print(COLOR_2 + "nothing set for this in act II");
				break;
			}
			if(me.areaid == 75) {	//
				Print(COLOR_2 + "nothing set for this in act III");
				break;
			}
			break;
		//	____________________________________________
		//
		case 191:										// / forward slash
			if(busy || _keyExtras)
				return Print(COLOR_1 + "Not now...");
		//
		// act i
			// Andarial
			var _andy = false;
			if(me.areaid == 1 || me.areaid == 35) {	
				Print(COLOR_2 + "going for andy");
				if(me.areaid == 1) {
					_andy = true;
					d2B_moveWP();
					d2B_gotoWP(35);
				}
				NTP_DoPrecast(true);
				for (i = 0; i < 2; i++) {
					d2B_moveToStair(me.areaid, 36 + i);
					d2B_takeStairs(36 + i, false);
					Delay(Random(1000,1200));
				}
				if(_andy) NTM_MoveTo(me.areaid, 22545, 9517);						// walls  right: 22563, 9556 | left: 22532, 9553 | very close: 22547, 9547 | 22545, 9517: towards the back where the rogues hang
				else if(!_andy) {
					NTM_MoveTo(me.areaid, 22590, 9596);					// as a helper will kill Andy, make a tp on the other side of the wall
					Delay(300);
					NTM_Make(TP);
					Delay(200);
					if(!NTM_UsePortal("BluePortal",1)) Town();
				}
				if(d2B_usingAFollower) d2B_team(true);
				//d2B_teamPro(true,3021,40,true,1,"n w", 22545, 9517);	// 3021: Andarial
				break;
			}
			// for finding an exp shrine
			if(!InTown(me)) {
				Print(COLOR_2 + "Looking for exp shrine...");
				Delay(500);
				NTP_DoPrecast(true);
				Delay(500);
				d2B_LXPC_FindShrines();
				break;
			}	
			break;
		case Key_POI:		
			if(busy)
				return Print(COLOR_1 + "Other Features are running.");
			else {
				if(_Teleport == -1) {
					_Teleport = 0;
					Delay(300);
					if(_Teleport != 0) break;
				}
				else if(_Teleport == 0) {_Teleport = 1; }
				else{ _Teleport = -1; break; }
				busy = true;
				TelePoi();
				_Teleport = -1;
			}
			busy = false;
			break;
		case Key_HiddenStats:
			StackedRes();
			FCRPlusPrint();
			SorbPrint();
			break;
		case Key_Breakpoints:
			T_BPsPrint();
			break;
		case Key_MyChicken:			// for stating x,y, and areaid parameters	
			Print(COLOR_4 + me.x + "," + me.y + COLOR_1 + " - " + me.areaid);
			//ChickenValues();
			break;
		case Key_CharStats:
			NTU_CheckMyStats();
			break;
		case Key_HotKeyInfo:
			Do_KeyHotList();
			Print(COLOR_4 + "Hotkeys sent to manager Common Log!");
			break;
		case Key_ExitGame:
			Print(COLOR_4 + "Calculating stats for game!");
			MG_ComputeStats(false);
			if(NTConfig_ChatRecording) ClosingChatRLogs();
			if(ItemSInfo) ItemSInfo = false;
			ExitGame();
			break;
		case Key_InvStashCheck:
			MG_CheckFreeStashSpace(StashChecking);
			MG_CheckFreeInventorySpace(InvChecking);
			break;
		case Key_DoPrecast:
			NTP_DoPrecast(true);
			break;
		case Key_GoToTown:
			HeadingHome();
			break;
		case Key_GameStats:
			MGConfig_EstRun = false;
			MG_ComputeStats(false);
			Print(COLOR_4 + "Current Game Stats sent to Manager!");
			MGConfig_EstRun = true;
			break;
		case Key_PickItems:
			NTSI_PickItems();
			break;
		case Key_NextWaypoint:
			MG_WaypointUp();
			break;
		case Key_CursoriLvL:
			NTU_CursorILvl();
			break;
		case Key_Refresh:
			MG_CheckBeltStuff();
			break;
		case Key_DevTools:
			NTMG_DevelopementTools();
			break;
		case 101:
			break;
		default:
			if(CheckKeyNumber)
				Print(COLOR_2 + WhatHotKey(keycode) + " / " + keycode);
			break;
	}
	return;
}
function d2B_noobRushCtrls(keycode) {
	switch(keycode) {
		case 46:			// [del] button (orig: Key_ExitGame)
			ExitGame();
			break;
		case 96:			// #pad 0: exit game (orig: Key_DoPrecast)
			ExitGame();
			break;
		case 19:			// 19: Key_AntiIdle | scrolling thru keypad menus
			_keycodeMenu = _keycodeMenu + 1;
			if(_keycodeMenu > 7) _keycodeMenu = 0;
			Print(COLOR_2 + "Customized key menu: " + COLOR_5 + _keycodeMenu + " - " + COLOR_4 + "exploring and testing team arrays and their usage...");
			Delay(Random(1000,1200));
			break;
		case 104:			// #pad 8: enable/disable pickit (orig: Key_DPSMeter)
			MGConfig_PickItems ? (MGConfig_PickItems = false) : (MGConfig_PickItems = true);
			MGConfig_PickAuto ? (MGConfig_PickAuto = false) : (MGConfig_PickAuto = true);
			Print(COLOR_2 + "MGConfig_PickItems" + COLOR_5 + MGConfig_PickItems);
			Delay(Random(1000,1700));
			Print(COLOR_5 + "MGConfig_PickAuto" + COLOR_2 + MGConfig_PickAuto);
			break;
		
		case 97:			// #pad 1: head to tree, grab scroll, town, and talk to Akara
			Print(COLOR_5 + "Doing: " + COLOR_2 + "tree, scroll, talking to Akara...");
			if(me.areaid == 1) {
				NTTM_TownMove("portalspot");
				if(!NTM_UsePortal("BluePortal", 5)) break;	// use dark wood portal
				d2B_NTV_ActivateQuestChest(30);				// click on tree of inifuss
				d2B_NTV_PickQuestItems(524);				// pick up the scroll of inifuss
				if(!NTM_UsePortal("BluePortal", 1)) Town();	// return to town
				d2B_NPCinteract("akara", 2892);				// interact with Akara			
				NTTM_TownMove("portalspot");
			}	
			break;
		case 98:			// #pad 2: engage the Cairn stones
			Print(COLOR_5 + "Doing: " + COLOR_2 + "activating cairn stones...");
			if(me.areaid == 1) {
				NTTM_TownMove("portalspot");
				if(!NTM_UsePortal("BluePortal", 4)) break;		// use stony wood portal
				NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, 737, 2, 2);	// go to cairn stones
				d2B_NTV_ActivateCairnStones(me.x, me.y);		// activates the stones
				Delay(Random(5000,6000));						// wait for red portal to open b4 towning
				if(!NTM_UsePortal("BluePortal", 1)) Town();		// return to town
				NTTM_TownMove("portalspot");
			}
			break;
		case 99:			// #pad 3: save cain
			Print(COLOR_5 + "Doing: " + COLOR_2 + "saving cain...");
			if(me.areaid == 1) {
				NTTM_TownMove("portalspot");
				if(!NTM_UsePortal("BluePortal", 38)) break;		// use trisran portal
				d2B_NTV_ActivateQuestChest(26, true);			// click on Cain's wooden cell to release him
				if(!NTM_UsePortal("BluePortal", 1)) Town();		// return to town
				NTTM_TownMove("portalspot");
			}
			break;
		case 100:			// #pad 4: andy
			Print(COLOR_5 + "going to | returning from: " + COLOR_2 + "safe andy spot...");
			if(me.areaid == 1) {
				NTTM_TownMove("portalspot");
				if(!NTM_UsePortal("BluePortal", 37)) break;		// use cata 4 portal
				
				break;
			}
			else if(me.areaid == 37) {
				if(!NTM_UsePortal("BluePortal", 1)) Town();		// return to town
				d2B_warriv();									// interact with warriv, head to a2
				NTTM_TownMove("portalspot");
			}
			break;
		case 101:			// #pad 5: grab rada scroll
			Print(COLOR_5 + "retrieving: " + COLOR_2 + "rada's scroll...");
			if(me.areaid == 40) {
				NTTM_TownMove("portalspot");
				if(!NTM_UsePortal("BluePortal", 49)) break;		// use safe sewers lvl3 portal
				if(!NTM_MoveTo(49, 22608, 9616)) break;
				break;
			}
			if(me.areaid == 49) {
				d2B_rada();										// head to rada's chest to pick up scroll
				if(!NTM_UsePortal("BluePortal", 40)) Town();	// return to town
				NTTM_TownMove("portalspot");
			}
		case 102:			// #pad 6: grab cube
			Print(COLOR_5 + "retrieving: " + COLOR_2 + "rada's scroll...");
			if(me.areaid == 40) {
				NTTM_TownMove("portalspot");
				if(!NTM_UsePortal("BluePortal", 60)) break;		// use safe halls of the dead lvl3 portal
				d2B_cube;										// open chest and grab cube
				if(!NTM_UsePortal("BluePortal", 40)) Town();	// return to town
				NTTM_TownMove("portalspot");
			}
			break;
	}
}
function _classid(i) {
	switch(i) {
		case 0:	return "Amazon";
		case 1: return "Sorceress";
		case 2: return "Necromancer";
		case 3: return "Paladin";
		case 4: return "Barbarian";
		case 5: return "Druid";
		case 6: return "Assassin";
	}
}

function MG_Resists() {
	Resi = [(me.GetStat(39) + DiffMod), (me.GetStat(43) + DiffMod), (me.GetStat(41) + DiffMod), (me.GetStat(45) + DiffMod)];
}

var _NTLW_timerLastDrink = new Array(5);

function d2B_keySettings(menu) {
	switch(menu) {
		case 0:						// menu: 0 - quick lvling of flwrs in chaos & throne
				Print(COLOR_2 + "Customized key menu: " + COLOR_5 + "quick lvling of flwrs in chaos & throne...");
				Print(COLOR_5 + "Keypad:");
				Print(COLOR_4 + "1: " + COLOR_7 + ". follow");
				Print(COLOR_4 + "2: " + COLOR_7 + "' town");
				Print(COLOR_4 + "3: " + COLOR_7 + "j jump/move a bit");
				Print(COLOR_4 + "4: " + COLOR_7 + "if ldr in town: tpSorc cTP | if ldr is in chaos: leechdiablo");
				Print(COLOR_4 + "5: " + COLOR_7 + "if ldr in town: tpSorc tTP | is ldr is in throne: send peeps to safe leech baal, send ldr to baal");
				Print(COLOR_4 + "6: " + COLOR_7 + "if ldr is a necro, revive skellies & revives");
				Print(COLOR_4 + "7: " + COLOR_7 + "find exp shrine");
				Print(COLOR_4 + "8: " + COLOR_7 + "sending followers to a5 or a4 depending on leader's area");
				Print(COLOR_4 + "9: " + COLOR_7 + "ldr & team precast");
				Print(COLOR_4 + "' "+ COLOR_7 + "direct zon to replenish her javs");
				Print(COLOR_4 + "]: " + COLOR_7 + "] chant everyone if out of town, chant only mercs in town");
				break;
		case 1:						// menu: 1 - main customized keycode menu
				Print(COLOR_2 + "Customized key menu: " + COLOR_5 + "main customized keycode menu...");
				Print(COLOR_5 + "Keypad:");
				Print(COLOR_4 + "1: " + COLOR_7 + ". follow");
				Print(COLOR_4 + "2: " + COLOR_7 + "' town");
				Print(COLOR_4 + "3: " + COLOR_7 + "j jump/move a bit");
				Print(COLOR_4 + "4: " + COLOR_7 + "if ldr in town: tpSorc cTP | if ldr is in chaos: leechdiablo");
				Print(COLOR_4 + "5: " + COLOR_7 + "if ldr in town: tpSorc tTP | is ldr is in throne: send peeps to safe leech baal, send ldr to baal");
				Print(COLOR_4 + "6: " + COLOR_7 + "if ldr is a necro, revive skellies & revives");
				Print(COLOR_4 + "7: " + COLOR_7 + "find exp shrine");
				Print(COLOR_4 + "8: " + COLOR_7 + "sending followers to a5 or a4 depending on leader's area");
				Print(COLOR_4 + "9: " + COLOR_7 + "ldr & team precast");
				Print(COLOR_4 + "' "+ COLOR_7 + "direct zon to replenish her javs");
				Print(COLOR_4 + "[: " + COLOR_7 + "corpsefire|treehead|cairn stones|malus||");
				Print(COLOR_4 + "]: " + COLOR_7 + "] chant everyone if out of town, chant only mercs in town");
				break;
		case 7:						// menu: 7 - this is for hi-lvl toon control
				Print(COLOR_2 + "Customized key menu: " + COLOR_5 + "this is for hi-lvl toon control...");
				Print(COLOR_5 + "Keypad:");
				Print(COLOR_4 + "1: " + COLOR_7 + "river wp, move a bit | make a tp & call team");
				Print(COLOR_4 + "2: " + COLOR_7 + "' town");
				Print(COLOR_4 + "3: " + COLOR_7 + "j jump/move a bit");
				Print(COLOR_4 + "4: " + COLOR_7 + "if ldr in town: tpSorc cTP | if ldr is in chaos: leechdiablo");
				Print(COLOR_4 + "5: " + COLOR_7 + "if ldr in town: tpSorc tTP | is ldr is in throne: send peeps to safe leech baal, send ldr to baal");
				Print(COLOR_4 + "6: " + COLOR_7 + "if ldr is a necro, revive skellies & revives");
				Print(COLOR_4 + "7: " + COLOR_7 + "find exp shrine");
				Print(COLOR_4 + "8: " + COLOR_7 + "sending followers to a5 or a4 depending on leader's area");
				Print(COLOR_4 + "9: " + COLOR_7 + "ldr & team precast");
				Print(COLOR_4 + "' "+ COLOR_7 + "direct zon to replenish her javs");
				Print(COLOR_4 + "]: " + COLOR_7 + "] chant everyone if out of town, chant only mercs in town");
				break;
	}	
	return 1;
}

function ChickenStuff() {
	for(var i = 0 ; i < 5 ; i++)
		_NTLW_timerLastDrink[i] = 0;

	_LifeMax = me.hpmax;
	_ManaMax = me.mpmax;
	if(!InTown()) {
		if(me.hp < parseInt(_LifeMax * MGConfig_LifeChicken,10) / 100) {
			ColorForMang = COLOR_1;
			PrintChicken("HPChicken");
			CloseD2();
		}
		else if(me.mp < parseInt(_ManaMax * MGConfig_ManaChicken,10) / 100) {
			ColorForMang = COLOR_3;
			PrintChicken("MPChicken");
			CloseD2();
		}
		if(parseInt(me.hp*100/_LifeMax) < MGConfig_LifeRejuvThresh) {
			My_DrinkPotion(2); Delay(Random(800,1200));
		}
		if(parseInt(me.hp*100/_LifeMax) < MGConfig_LifeThresh) {
			My_DrinkPotion(0); Delay(Random(800,1200));
		}
		if(parseInt(me.mp*100/_ManaMax) < MGConfig_ManaRejuvThresh) {
			My_DrinkPotion(2); Delay(Random(800,1200));
		}
		if(parseInt(me.mp*100/_ManaMax) < MGConfig_ManaThresh) {
			My_DrinkPotion(1); Delay(Random(800,1200));
		}
	}
	else {
		if(MGConfig_ChickenWarn) {
			ChickenWarning();
		}
	}
}

function My_DrinkPotion(type){
	var _pottype;
	var _result;
	var _tNow = new Date();

	if(type == 2 || type == 4){
		if(_NTLW_timerLastDrink[type] && (_tNow-_NTLW_timerLastDrink[type] < 1000))
			return false;
	}
	else{
		if(_NTLW_timerLastDrink[type] && (_tNow-_NTLW_timerLastDrink[type] < 3000))
			return false;
	}
	if(me.mode == 0 || me.mode == 17)
		return false;
	switch(type){
		case 0:
		case 3: _pottype = "hp"; break;
		case 1: _pottype = "mp"; break;
		default: _pottype = "rv"; break;
	}
	for(var i = 0 ; i < 4 ; i++){
		if(MGConfig_BeltType[i] == _pottype){
			if(type < 3)
				_result = me.UseBelt(i);
			else
				_result = me.UseBelt(i, true);
			if(_result){
				_NTLW_timerLastDrink[type] = new Date();
				return true;
			}
		}
	} return false;
}

function ChickenValues() {
	HealthThresh = parseInt(me.hpmax * MGConfig_LifeChicken,10) / 100;
	ManaThresh = parseInt(me.mpmax * MGConfig_ManaChicken,10) / 100;
	if(MGConfig_LifeChicken > 0)
		Print(COLOR_8 + "Health chicken at " + COLOR_1 + HealthThresh + " HP");
	else
		Print(COLOR_8 + "Health chicken not activated!");
	if(MGConfig_ManaChicken > 0)
		Print(COLOR_8 + "Mana chicken at " + COLOR_3 + ManaThesh + " MP");
	else
		Print(COLOR_8 + "Mana chicken not activated!");
}

function PrintChicken(type) {
	var Area = GetArea();
	var MangMsg = "";
	var AreaName = "Candy Mansion";
	var Mob;
	var CloseMobs = new Array();
	CloseMobs = NTU_GetNearbyMonsters(20);
	if (Area) AreaName = Area.name;

	MangMsg += ColorForMang + "Chicken (" + AreaName + ")" + ";";
	MangMsg += COLOR_1 + "-------------" + COLOR_4 + Today + COLOR_1 + " - " + COLOR_4 + TheTime + COLOR_1 + "-------------";

	HealthThresh = parseInt(me.hpmax * MGConfig_LifeChicken,10) / 100;
	ManaThresh = parseInt(me.mpmax * MGConfig_ManaChicken,10) / 100;

	if (type == "HPChicken") {
		MangMsg += COLOR_1 + "\n " + "Health" + COLOR_4 + "(" + COLOR_1 + MGConfig_LifeChicken + COLOR_4 + "%/" + COLOR_1 + HealthThresh + " HP" + COLOR_4 + ")";
		MangMsg += COLOR_3 + "\n Mana: (" + me.mp + ")"
	}
	if (type == "MPChicken") {
		MangMsg += COLOR_3 + "\n " + "Mana " + COLOR_4 + "(" + COLOR_3 + MGConfig_ManaChicken + COLOR_4 + "%/" + COLOR_3 + ManaThresh + " MP" + COLOR_4 + ")";
		MangMsg += COLOR_1 + "\n Life: (" + me.hp + ") "
	}

	if (me.hp <= 0) MangMsg += COLOR_8 + "\n ** Character Death **";
	MangMsg += COLOR_8 + "\n Possible Murderers: ";

	if(CloseMobs.length == 0) { MangMsg+= COLOR_9 + "\n  " + "You didn't heal before leaving town huh?" }
	else if(CloseMobs.length > 0 && CloseMobs.length < 10) {
		for (_index in CloseMobs) {
			Mob = CloseMobs[_index];
			MangMsg += COLOR_9 + "\n  " + Mob;
		}
	}
	else { MangMsg += COLOR_9 + "\n  Too many to list."; }
	MangMsg += COLOR_1 + "\n -------------------------------------------";

	MG_LogToOOG(NTC_LOG_COMMON, MangMsg);
	return;
}

function InTown(MyChar) {
	return (me.areaid == 1 || me.areaid == 40 || me.areaid == 75 || me.areaid == 103 || me.areaid == 109);
}
var WarnedMeOnce = false;

function ChickenWarning() {
	if(!WarnedMeOnce){
		if(me.hp < parseInt(me.hpmax * MGConfig_LifeChicken,10) / 100) {
			Print(COLOR_1 + "HP" + COLOR_4 + " Chicken attained (" + COLOR_1 + MGConfig_LifeChicken + COLOR_4 + "). Be sure to heal before leaving town!");
		}
		else if(me.mp < parseInt(me.mpmax * MGConfig_ManaChicken,10) / 100) {
			Print(COLOR_3 + "MP" + COLOR_4 + " Chicken attained (" + COLOR_3 + MGConfig_ManaChicken + COLOR_4 + "). Be sure to heal before leaving town!");
		}
	}
	WarnedMeOnce = true;
}

function addSeparatorsNF(nStr, inD, outD, sep) {
	nStr += '';
	var dpos = nStr.indexOf(inD);
	var nStrEnd = '';
	if (dpos != -1) {
		nStrEnd = outD + nStr.substring(dpos + 1, nStr.length);
		nStr = nStr.substring(0, dpos);
	}
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(nStr)) {
		nStr = nStr.replace(rgx, '$1' + sep + '$2');
	}
	return nStr + nStrEnd;
}

var _TotalExp = [0, 0, 500, 1500, 3750, 7875, 14175, 22680, 32886, 44396, 57715, 72144, 90180, 112725, 140906, 176132, 220165, 275207, 344008, 430010, 537513, 671891, 839864, 1049830, 1312287, 1640359, 2050449, 2563061, 3203826, 3902260, 4663553, 5493363, 6397855, 7383752, 8458379, 9629723, 10906488, 12298162, 13815086, 15468534, 17270791, 19235252, 21376515, 23710491, 26254525, 29027522, 32050088, 35344686, 38935798, 42850109, 47116709, 51767302, 56836449, 62361819, 68384473, 74949165, 82104680, 89904191, 98405658, 107672256, 117772849, 128782495, 140783010, 153863570, 168121381, 183662396, 200602101, 219066380, 239192444, 261129853, 285041630, 311105466, 339515048, 370481492, 404234916, 441026148, 481128591, 524840254, 572485967, 624419793, 681027665, 742730244, 809986056, 883294891, 963201521, 1050299747, 1145236814, 1248718217, 1361512946, 1484459201, 1618470619, 1764543065, 1923762030, 2097310703, 2286478756, 2492671933, 2717422497, 2962400612, 3229426756, 3520485254, 0, 0];
var _ExpToNextLvl = [0, 500, 1000, 2250, 4125, 6300, 8505, 10206, 11510, 13319, 14429, 18036, 22545, 28181, 35226, 44033, 55042, 68801, 86002, 107503, 134378, 167973, 209966, 262457, 328072, 410090, 512612, 640765, 698434, 761293, 829810, 904492, 985897, 1074627, 1171344, 1276765, 1391674, 1516924, 1653448, 1802257, 1964461, 2141263, 2333976, 2544034, 2772997, 3022566, 3294598, 3591112, 3914311, 4266600, 4650593, 5069147, 5525370, 6022654, 6564692, 7155515, 7799511, 8501467, 9266598, 10100593, 11009646, 12000515, 13080560, 14257811, 15541015, 16939705, 18464279, 20126064, 21937409, 23911777, 26063836, 28409582, 30966444, 33753424, 36791232, 40102443, 43711663, 47645713, 51933826, 56607872, 61702579, 67255812, 73308835, 79906630, 87098226, 94937067, 103481403, 112794729, 122946255, 134011418, 146072446, 159218965, 173548673, 189168053, 206193177, 224750564, 244978115, 267026144, 291058498, 0, 0];

var _startLvl;
var _startExp;
var _startTime;

function MG_InitializeStats() {
    _startLvl = me.GetStat(12);
    _startExp = me.GetStat(13);
	_startGold = me.GetStat(14) + me.GetStat(15);
    if (_startExp < 0 || _startLvl >= 86) { _startExp = (2147483648 + _startExp); }
    if (_startExp < 2147483648 && _startLvl >= 97) { _startExp = (2147483648 + _startExp); }
    _startTime = GetTickCount();
}

var CountingUp = 0;
function MG_ComputeStats(chickenFlag) {
	var _endGold = (me.GetStat(14) + me.GetStat(15));
	var _endLvl = me.GetStat(12);
    var _lvlsGained = _endLvl - _startLvl;
    var _endExp = me.GetStat(13);
    if (_endExp < 0 || _endLvl >= 86) { _endExp = (2147483648 + _endExp); }
    if (_endExp < 2147483648 && _endLvl >= 97) { _endExp = (2147483648 + _endExp); }

    var _endLvlExp = _TotalExp[_endLvl];
    var _expGained = _endExp - _startExp;
    var _endTime = GetTickCount();
    if (_expGained <= 0) { _expGained = '0'; }

    // Calculate percent of Exp obtained toward next level
    // Remaining Exp / Exp needed to level
    var _progressPercent = parseInt(1000 * (_endExp - _endLvlExp) / _ExpToNextLvl[_endLvl],10) / 10;
	if(_progressPercent >= 0) { var _prop = _progressPercent + "%"; } else { var _prop = "0%"; };

    // Estimate number of runs remaining until next level based on Exp gained
    // Remaining Exp needed to level / Exp Gained
	if(_expGained > 0) {
		var _runsToLevel = (100 - _progressPercent) * _ExpToNextLvl[_endLvl] / (100 * _expGained);
		if(_runsToLevel > 10) {_runsToLevel = parseInt(_runsToLevel,10); } else { _runsToLevel = parseInt(100 * _runsToLevel,10) / 100; };
		LvLProgXP = "";
		if(MGConfig_EstRun){ LvLProgXP += "\n Est. Runs Until Next Level: " + COLOR_2 + addSeparatorsNF(_runsToLevel, ",", ".", ","); }
		LvLProgXP += COLOR_4 + "\n Current Level Progress: " + COLOR_2 + _prop;
		LvLProgXP += COLOR_4 + "\n Experience Gained: " + COLOR_2 + addSeparatorsNF(_expGained, ",", ".", ",");
	}
	else {
		LvLProgXP = "";
	}

	if(_endGold > _startGold){
		_GoldCount = (_endGold - _startGold);
		GoldenInfo = "\n Gold Gained: " + COLOR_2 + _GoldCount;
	}
	else if(_endGold < _startGold){
		_GoldCount = (_startGold - _endGold);
		GoldenInfo = "\n Gold Lost: " + COLOR_1 + _GoldCount;
	}
	else{
		GoldenInfo = "";
	}

    var RunTime = parseInt(((_endTime - _startTime) / 60000),10) + "m " + (parseInt(((_endTime - _startTime) / 1000),10) - parseInt(((_endTime - _startTime) / 60000),10) * 60) + "s";

	if(_lvlsGained > 0) DidGainLvl = "\n Levels Gained : " +  _lvlsGained;
	else if(_lvlsGained < 1) DidGainLvl = "";

	if(me.gameserverip) { CurChar = COLOR_4 + "Game Statistics [" + COLOR_3 + me.gamename + COLOR_4 + "]"; } else { CurChar = me.charname + " " + COLOR_4 + "Game Statistics"; }

	if (!chickenFlag) {
		XPMangMsg = COLOR_8 + CurChar + ";";
		XPMangMsg += COLOR_1 + "--------------------------------------------------";
		XPMangMsg += COLOR_4 + LvLProgXP;
        XPMangMsg += COLOR_4 + "\n Character Level: " + COLOR_2 + _endLvl;
		XPMangMsg += COLOR_1 + DidGainLvl;
		XPMangMsg += COLOR_4 + "\n Elapsed time: " + COLOR_2 + RunTime;
        XPMangMsg += COLOR_4 + "\n Game IP: " + COLOR_2 + Online;
		XPMangMsg += COLOR_4 + GoldenInfo;
		XPMangMsg += COLOR_1 + "\n --------------------------------------------------";
		MG_LogToOOG(NTC_LOG_COMMON, XPMangMsg);
	}
	return;
}

function MG_CheckBeltStuff(startup) {
	var MGConfig_BeltColType = new Array(16);
	var i;
	var _result;
	var _items;
		_items = me.GetItems();
	for(i = 0; i < _items.length; i++) {
		if(_items[i].mode == 2){
			if(_items[i].classid > 586 && _items[i].classid < 592){ // HP potions
				MGConfig_BeltColType[_items[i].x] = COLOR_1 + "Heal";
				MGConfig_BeltType[_items[i].x] = "hp";
			}
			else if(_items[i].classid > 591 && _items[i].classid < 597){ // MP potions
				MGConfig_BeltColType[_items[i].x] = COLOR_3 + "Mana";
				MGConfig_BeltType[_items[i].x] = "mp";
			}
			else if(_items[i].classid > 514 && _items[i].classid < 517){ // RV potions
				MGConfig_BeltColType[_items[i].x] = COLOR_2 + "Reju";
				MGConfig_BeltType[_items[i].x] = "rv";
			}
			else if(_items[i].classid == 517){ // Thawing
				MGConfig_BeltColType[_items[i].x] = COLOR_9 + "Thaw";
			}
			else if(_items[i].classid == 514){ // Antidote
				MGConfig_BeltColType[_items[i].x] = COLOR_5 + "Anti";
			}
			else if(_items[i].classid == 513){ // Stamina
				MGConfig_BeltColType[_items[i].x] = COLOR_0 + "Stam";
			}
		}
	}
	for(x = 0; x < 16; x++){
		if(MGConfig_BeltColType[x] == undefined)
			MGConfig_BeltColType[x] = COLOR_8 + "None";
	}
	if(!startup){
		MyBeltInfo = COLOR_8 + "Belt Info For " + COLOR_2 + me.charname + ";";
		MyBeltInfo += MGConfig_BeltColType[12] + " " + MGConfig_BeltColType[13] + " " + MGConfig_BeltColType[14] + " " + MGConfig_BeltColType[15] + "\n";
		MyBeltInfo += MGConfig_BeltColType[8] + " " + MGConfig_BeltColType[9] + " " + MGConfig_BeltColType[10] + " " + MGConfig_BeltColType[11] + "\n";
		MyBeltInfo += MGConfig_BeltColType[4] + " " + MGConfig_BeltColType[5] + " " + MGConfig_BeltColType[6] + " " + MGConfig_BeltColType[7] + "\n";
		MyBeltInfo += MGConfig_BeltColType[0] + " " + MGConfig_BeltColType[1] + " " + MGConfig_BeltColType[2] + " " + MGConfig_BeltColType[3] + "\n";
		MG_LogToOOG(NTC_LOG_COMMON, MyBeltInfo);
		//Print(MGConfig_BeltColType[12] + " " + MGConfig_BeltColType[13] + " " + MGConfig_BeltColType[14] + " " + MGConfig_BeltColType[15]);
		//Print(MGConfig_BeltColType[8] + " " + MGConfig_BeltColType[9] + " " + MGConfig_BeltColType[10] + " " + MGConfig_BeltColType[11]);
		//Print(MGConfig_BeltColType[4] + " " + MGConfig_BeltColType[5] + " " + MGConfig_BeltColType[6] + " " + MGConfig_BeltColType[7]);
		//Print(MGConfig_BeltColType[0] + " " + MGConfig_BeltColType[1] + " " + MGConfig_BeltColType[2] + " " + MGConfig_BeltColType[3]);
		Print(COLOR_8 + "Belt slots refreshed!");
	}
	return MGConfig_BeltType;
}

function MG_LogToOOG(type, logString) { 
	Delay(100);
	return SendCopyData("D2NT Manager", null, 9<<16|type, logString);
}

//
// common functions
//
function d2B_load() {
 	Include("libs/common/NTCommon.ntl");
	NTC_IncludeLibs();
	NTC_IncludeConfig("NTBot/char_configs");
	NT_LoadConfig();
	NTSI_LoadNIPFiles("NTBot/item_configs");
	NTA_Initialize();
  
  	return;
}
function d2B_newGmDlyPeepChk() {
	Print(COLOR_2 + "Taking an extended break, so as to give the peeps time to enter game...");
	Delay(Random(35000,40000));
	d2B_msg(",");
	Delay(Random(7300,10000));
		
	// check to see if peeps have arrived...
		
	d2B_Peeps();
	if(d2B_rPeepsInGame(true)) {
		Print(COLOR_7 + "All peeps are in the game.");
		Delay(1000);
		if(_msgMe) Say("/msg *" + _myName + " All peeps in!");
	}
	return;
}
function d2B_commonInitSetup(a) {
	d2B_chkAct();
	d2B_townMgr();
	d2B_moveWP();
	d2B_gotoWP(a);
	NTP_DoPrecast(true);
	//NTConfig_SkipRegularMonsters = false;
	
	return;
}
function InTown(MyChar) {
	return (me.areaid == 1 || me.areaid == 40 || me.areaid == 75 || me.areaid == 103 || me.areaid == 109);
}
function d2B_chkAct() {
	if(!NTTM_CheckAct()){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_CheckAct()");
		return;
	}
	return;
}
function d2B_chkAct2(a,b) {							// a: true sends team to town | b: act 1 thru 5
	if(a) {
		Delay(Random(10000,14000));
		d2B_team(false);
		Delay(Random(3000,5000));
	}
	if(!NTTM_CheckAct(b)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_CheckAct()");
	}
	Delay(Random(3000,5000));
	d2B_moveWP();
	Delay(Random(3000,5000));
	return;
}
function d2B_townMgr() {
	if(NTC_InTown(me)) {
		if(d2B_refill) NTTMGR_TownManager();
	}
	return;
}
function d2B_townMove(a) {
	if(!NTTM_TownMove(a)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
		return;
	}
	return;
}
function d2B_endCase(a) {
	NTM_MakeTP();
	Delay(300);
	d2B_msg("'");
	Delay(Random(4000,6000));
	NTTM_CheckAct(a);
	return;
}
function d2B_moveWP() {
	if(!NTTM_TownMove("waypoint")){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
		return;
	}
	return;
}
function d2B_gotoWP(a) {
	if(!NTM_TakeWaypoint(a)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTM_TakeWaypoint()");
		return;
	}
	return;
}
function d2B_movePresetUnitTitle(a,b,c,d) {			// NTM_MoveToPresetUnit(areaid, unittype, classid, offsetx, offsety, clearpath)
	if(c != 0) {
		if(!NTM_MoveToPresetUnit(a, NTC_UNIT_TILE, b, c, d)){
			NTC_SendMsgToScript("NTBotGame.ntj", "NTM_MoveToPresetUnit()");
			return;
		}
	}
	if(c == 0) {
		if(!NTM_MoveToPresetUnit(a, NTC_UNIT_TILE, b)){
			NTC_SendMsgToScript("NTBotGame.ntj", "NTM_MoveToPresetUnit()");
			return;
		}
	}
	return;
}
function d2B_movePresetUnitMonster(a,b,c) {
	if(!NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_MONSTER, a, b, c)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTM_MoveToPresetUnit()");
		return;
	}
	return;
}
function d2B_KoMoveToPresetUnit(areaId, unitType, classId, offsetX, offsetY, clearpath) {

    var i, j;
    var _oldUnits, _newUnits;

    if (arguments.length < 4) { offsetX = 0; offsetY = 0; }
	if (arguments.length < 6) { clearpath = false }                               
    for (i = 0; i < 3; i++)
    {
        _oldUnits = GetPresetUnits(areaId, unitType);
        if (_oldUnits)
        {
            for (j = 0; j < _oldUnits.length; j++)
            {
                if (_oldUnits[j].id == classId)
                {
                    if (NTM_MoveTo(areaId, _oldUnits[j].roomx * 5 + _oldUnits[j].x + offsetX, _oldUnits[j].roomy * 5 + _oldUnits[j].y + offsetY, 3, clearpath))
                        return true;
                    else
                    {
                        switch (me.areaid)
                        {
						case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                            var _moveXy = [[30, 0], [0, 30], [-30, 0], [0, -30]];

                            for (i = 0; i < 4; i++)
                            {
                                while (true)
                                {
                                    if (!NTM_TeleportTo(me.x + _moveXy[i][0], me.y + _moveXy[i][1]))
                                        break;
                                    if (NTM_MoveTo(areaId, _oldUnits[j].roomx * 5 + _oldUnits[j].x + offsetX, _oldUnits[j].roomy * 5 + _oldUnits[j].y + offsetY, 0, clearpath))
                                        return true;
                                }
                            }
                            break;
                        }

                        return false;
                    }
                }
            }
        }

        if (i < 2)
            Delay(500);
    }

    return false;
}
function d2B_usePortal(a,b){
	if(!NTM_UsePortal(a, b)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTM_UsePortal()");
		return;
	}
	return;
}
function d2B_moveToStair(a,b) {
	Delay(Random(300,1000));
	if(!NTM_MoveToStair(a, b)) {
		NTC_SendMsgToScript("NTBotGame.ntj", "NTM_MoveToStair()");
	}
	Delay(Random(1200,2000));
	return;
}
function d2B_takeStairs(a,b) {						// a: area stairs | b: engage clr lvl & open chests
	Delay(Random(4000,6000));
	if(!NTM_TakeStair(a)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTM_TakeStair()");
	}
	if(d2B_usingAFollower) {
		NTM_MakeTP();
		Delay(300);
		d2B_msg(".");
		Delay(Random(5000,7000));
	}
	if(b) {
		NTP_DoPrecast();
		d2B_clrLvlOC();
	}
	return;
}
function d2B_clrLevel() {
	if(!NTA_ClearLevel(true)){						// true: pickit enabled
		return;
	}
	return;
}
function d2B_openChests() {
	if(NTConfig_OpenChestsInArea && NTU_DontOpenAreas()){
		OpenChestsInArea();
	}
	return;
}
function d2B_clrLvlOC() {
	d2B_clrLevel();
	d2B_openChests();
	return;
}
function d2B_myTP(a,b,c,d,e,f) {					// (a: delay | b: bo true/false | c: precast | d: clr level chests | e,f: delay(random(e,f))) 
	if(!d2B_usingAFollower) return;
	if(a) {					
		d2B_msg(",");						// make sure everyone is at the portal area
		Delay(Random(5300,6000));
	}					
	NTA_ClearPosition(5);
	Delay(700);
	Delay(Random(2300,4000));
	NTM_MakeTP();
	Delay(300);
	d2B_msg(".");
	if(!a) {Delay(Random(8300,11000));}	// enough delay for all to arrive
	Delay(Random(4000,5000));
	if(b) {
		d2B_bo();						// enable barb boer
		Delay(Random(2000,3000));
		while(_myBoBarb.areaid == me.areaid) {
			if(_msgMe) Say("/msg *" + _myName + " Darn. " + _myBoBarb + " has not gone to town.");
			Delay(Random(5000,6000));
			d2B_msg("b ..");
			Delay(1200);
			d2B_msg("b '");
			Delay(1200);
		}
	}
	if(c) NTP_DoPrecast(true);
	if(d) d2B_clrLvlOC();
	if(e) Delay(Random(e,f));
}
function d2B_team(a) {								// (a: false = send team to town true: bring team)
	NTM_MakeTP();
	Delay(200);
	if(a) d2B_msg(".");	
	else if(!a) {
		d2B_msg("'");
		Delay(Random(3000,4000));
		return;
	}
	Delay(200);
	return;
}
function d2B_teamPro(a,b,c,d,e,f,g,h) {				// (a: d2B_team(a) | b: GetLocaleString(b) | NTA_ClearPosition(c,1)
													// d,e: d2B_chkAct2(d,e) | f: if(f) d2B_msg(f) 
													// g,h: original location of where team tp was made)
	d2B_team(a);
	NTA_KillMonster(GetLocaleString(b));
	Delay(300);
	if(f) d2B_msg(f);								// extra follower instructions: e.g.: "n w"  necro make a bone wall
	Delay(Random(3000,4000));
	NTA_ClearPosition(c,1);							// a: distance | 1: enable pick items
	NTSI_PickItems();
	Delay(Random(2000,4000));
	NTA_ClearPosition(c, true);
	if(g && !InTown()) NTM_MoveTo(me.areaid, g, h);
	Delay(Random(4000,6000));						// deeEdit: chk this as it was (300)
	d2B_msg("..");
	Delay(Random(1700,3000));
	d2B_chkAct2(d,e);
	d2B_msg("..");
	Delay(2300);
	d2B_msg("'");
	Delay(Random(4000,6000));
	d2B_msg(",");
	return;
}
function d2B_bo() {									//	for instructing a bo barb
	if(!_myBoBarb) {								// if there is no official boer, then let team barb bo
		Delay(Random(4000,6000));
		d2B_msg(";");
		Delay(Random(6000,8000));
		return;
	}
	d2B_msg("b ,");				// make sure barb is at the portal area
	Delay(Random(7000,9000));
	d2B_msg("b .");				// tell barb to come through tp
	Delay(Random(8000,10000));
	d2B_msg("b ;");				// instruct barb to precast
	Delay(Random(10000,13000));
	d2B_msg("b '");				// send barb back to town
	Delay(Random(7000,9000));
	return;
}
function d2B_boSafe(a,b,c,d) {						// (a: NTTM_CheckAct(a) | b: d2B_gotoWP(b) | c: d2B_isTeamInTown(1,b) ) 
	if(!InTown()) { NTTM_CheckAct(a); }
	d2B_moveWP();
	d2B_gotoWP(b);
	d2B_littleJMP();
	d2B_myTP(true,true,true,false,false);
	d2B_msg("..");
	Delay(Random(2000,5000));
	d2B_team(false);
	Delay(Random(5000,7000));
	d2B_isTeamInTown(c,d);
	return;
}	
function d2B_CheckAct(peep) {
	if (peep.areaid <= 39) { return 1;}					// peep = "me", "leader"
	else if(peep.areaid >= 40 && peep.areaid <= 74) { return 2; }
	else if(peep.areaid >= 75 && peep.areaid <= 102) { return 3; }
	else if(peep.areaid >= 103 && peep.areaid <= 108) { return 4; }
	else return 5;
}
function d2B_checkAct(a,b) {						// (a: which act b: which town wp to go to)
	if(!NTTM_CheckAct(a)) {
			NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_CheckAct()");
			return;
	}
	d2B_townMgr();
	NTTM_TownMove("waypoint");
	if(b) { NTM_TakeWaypoint(b) };
	
	return;
}
function d2B_msg(a) {
	if(d2B_usingAFollower) {
		Say("/f m " + a);
		Delay(300);
		return;
	}
	Say("/f m " + a);
	Delay(300);
	return;
}
function d2B_littleJMP() {
	var x_tmp = Random(3,8);
	x_tmp *= (Random(1,2) / 2) == 1 ? 1 : -1;
	var y_tmp = Random(3,8);
	y_tmp *= (Random(1,2) / 2) == 1 ? 1 : -1;
	if(!NTM_MoveTo(me.areaid, me.x+x_tmp, me.y+y_tmp)) return;
	return;
}
function d2B_safeTeam(a,b,c,d) {
	NTM_MoveTo(a,b,c);
	NTCS_ClearPosition(d);
	NTM_MoveTo(a,b,c);
	d2B_team(true);
	Delay(Random(500,1500));
	NTCS_ClearPosition(d);
	return;
}
function d2B_usePortal() {
	var _portal = NTC_FindUnit(NTC_UNIT_OBJECT, GetLocalString(3226), 15);
	NTM_MoveTo(me.areaid, _portal.x, _portal.y);
	NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _portal);
	Delay(Random(1000,2000));
	return;
}
function d2B_NTTM_CheckAct(area) {
	if(!NTM_UsePortal("BluePortal", area)) {
		NTTM_CheckAct();
	}
	return;
}
function d2B_NTV_ActivateQuestChest(id, TK, disX, disY) { // objectId, UseTelek(bool)
	if (arguments.length < 2) TK = false;
	if (arguments.length < 3) {
		disX = 10;
		disY = 10;
	}
	var _tkFailed = false;
	var _isTelekinesis = NTC_GetSkillLevel(43); // may want to move these to the top and add a config option to it
	var _object = NTC_FindUnit(NTC_UNIT_OBJECT, id, 5);
	if(TK){
		if(_object){
			if(NTC_CHAR_CLASS_SORCERESS && _isTelekinesis && _object){
				NTM_MoveCloseInt(_object, 20)
					NTC_CastSkill(43, NTC_HAND_RIGHT, _object);
			}
		}
		else if(!_object){
			NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, id, disX, disY) // disX, disY for fine tunning distance from object
			var _object = NTC_FindUnit(NTC_UNIT_OBJECT, id, 10);
			if(_object){
				NTC_CastSkill(43, NTC_HAND_RIGHT, _object);
			}
		}
		if(!_object || !_object.mode) _tkFailed = true;
		else if(_object.mode) return true;
	}
	
	if(!TK || _tkFailed) {
		NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, id)
		var _object = NTC_FindUnit(NTC_UNIT_OBJECT, id, 10);
		while(!_object.mode){ // might want to make this a for loop so we don't get stuck here in an endless loop
			if(GetDistance(me, _object) > 3)
				NTM_MoveTo(_object.areaid, _object.x+2, _object.y);
			NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _object);
			NTC_PingDelay(500);
		}
		if(_object.mode) return true;
	}
	return false;
}
function d2B_NTV_PickQuestItems(_item) {
	var _alreadyHave = me.GetItems(_item);
	if(_alreadyHave.length > 0){
		return true;
	}
	var _grounditem = NTC_FindUnit(NTC_UNIT_ITEM, _item);
	if(_grounditem){
		if(_grounditem.mode == 3 || _grounditem.mode == 5){
			if(NTSI_PickUpItemInt(_grounditem)){
				Print(COLOR_4 + "Picked Quest Item " + COLOR_17 + _grounditem.name.split("\n")[0]);
				return true;
			}
		}
	}
	return false;
}
function d2B_NTV_ClickQuestItem(item){ // for clicking items in invenetory/stash, book of skill, anya scroll etc
    var _items = me.GetItems(item);
    if (_items && _items.length > 0){
		if(_items[0].mode == 0 && _items[0].itemloc == 0){
			SetUIState(0x01, true);
			me.ClickItem(1, _items[0]);
			NTC_PingDelay(800);
			NTC_CancelMenus();
		}
		else if(_items[0].mode == 0 && _items[0].itemloc == 4){
			NTU_MoveToStash();
			me.ClickItem(1, _items[0]);
			NTC_PingDelay(800);
			NTC_CancelMenus();
		}
    }
    return;
}
function d2B_NPCinteract(NPCname, GLS) {
	NTTM_TownMove(NPCname);
	_npc = NTC_FindUnit(NTC_UNIT_NPC, GetLocaleString(GLS), 5);
	if(!_npc) return false;
	
	if(_npc) {
		NTM_MoveTo(me.areaid, _npc.x, _npc.y);
		if(NTT_DoInteract(_npc)) {
			Delay(Random(2000,4000));
			me.Cancel(1);
			return true;
		}
	}
	return false;
}
function d2B_NTV_ActivateCairnStones(cenX, cenY){

	var _isTelekinesis = NTC_GetSkillLevel(43);
	var _cairnStoneIds = [17, 18, 19, 20, 21]; // cairn stone id's

	if(NTC_CHAR_CLASS_SORCERESS && _isTelekinesis){
		NTM_MoveTo(me.areaid, cenX, cenY);
	}
	while(_cairnStoneIds.length){
		for(var i = 0; i <  _cairnStoneIds.length ; i++){
			var _toBeClicked = NTC_FindUnit(NTC_UNIT_OBJECT, _cairnStoneIds[i], 5);
			if(_toBeClicked){
				if(NTC_CHAR_CLASS_SORCERESS && _isTelekinesis){
					NTC_CastSkill(43, NTC_HAND_RIGHT, _toBeClicked);
				}
				else{
					if(NTM_GetCloserIntS(_toBeClicked)){
						NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _toBeClicked);
					}
				}
				NTC_Delay(100);
				if(_toBeClicked.mode){
					Print(COLOR_2 + _cairnStoneIds[i]);
					_cairnStoneIds.splice(i--, 1);
				}
			}
		}
	}
	return;
}
function d2B_warriv() {	// for interacting w/ warriv and heading to a2 or a1
	NTTM_TownMove("warriv");
	_npc = NTC_FindUnit(NTC_UNIT_NPC, GetLocaleString(2895), 5);
	if(!_npc) return false;
	
	if(_npc) {
		NTM_MoveTo(me.areaid, _npc.x, _npc.y);
		if(NTT_DoInteract(_npc)) {
			for(var i = 0 ; i < 4 ; i++){
				if((i % 4) == 0) {
					if(me.act == 1) me.SelectNPCMenu(0x0D36);
					if(me.act == 2) me.SelectNPCMenu(0x0D37);
				}
				NTC_Delay(250);
			}	
		}
		me.Cancel(1);
	}
	return 1;
}
function d2B_rada() {	// for retrieving the rada scroll
	_chest = GetPresetUnits(me.areaid, NTC_UNIT_OBJECT, 355);
	_chestx = _chest[0].roomx*5 + _chest[0].x;
	_chesty = _chest[0].roomy*5 + _chest[0].y;		
	NTM_MoveTo(me.areaid, _chestx, _chesty);
	
	d2B_NTV_PickQuestItems(552);		// pick up rada scroll
	Delay(Random(500,1000));
	
	var _skillBook = me.GetItems(552);
	if(_skillBook) {
		d2B_NTV_ClickQuestItem(552);	// use the rada scroll
	}
	Delay(Random(1500,1700));
	return 1;
}
function d2B_cube() {		// open chest and then grab the cube
	_chest= NTC_FindUnit(NTC_UNIT_OBJECT, 354);
	if (_chest) {	
		if(NTM_MoveTo(me.areaid, _chest.x+3, _chest.y)) {
			if(d2B_NTV_PickQuestItems(552)) Delay(Random(500,1000));	// pick up the cube
		}
		if (NTC_OpenChest(_chest)) {
			if(d2B_NTV_PickQuestItems(552)) Delay(Random(500,1000));	// pick up the cube
		}
	}
	return 1;
}
function d2B_chant(t) {
	if(NTC_GetSkillLevel(52)) {
		// Enchant player
		var _player = NTC_FindUnit(NTC_UNIT_PLAYER);
		//var _merc = NTC_FindUnit(NTC_UNIT_MERC);
		if(!_player)
			return;
		do
		{
			if(_player.name !== me.name && GetDistance(me, _player) <= 20 && NTC_InMyParty(_player.name) && !t) {	
				NTC_Delay(1250);
				NTC_CastSkill(52, NTC_HAND_RIGHT, _player);
			}
			// Enchant merc
			var _merc = NTC_FindUnit(NTC_UNIT_MERC);
			if(_merc) {
				do {
					if(NTC_CheckOwner(_merc, _player.name) && GetDistance(me, _merc) < 20 && _merc.hp > 0 && _player.name !== me.name) {
						NTC_Delay(1250);
						NTC_CastSkill(52, NTC_HAND_RIGHT, _merc);
					}
				} while (_merc.GetNext());
			}
		} while( _player.GetNext() )
	}
	
	return;
}
//
//	player checking functions
//
function d2B_storePlayerNames() {
	var Player = GetPlayerUnit();
	if(Player){
		do{
			if(array_myTeam.indexOf(Player.name) == -1) array_myTeam.push(Player.name);
			Print(COLOR_2 + "Player #" + COLOR_3 + i + " " + COLOR_7 + Player.name +
				COLOR_5 + " in area: " + COLOR_8 + Player.areaid);
			Delay(750);
		} while(Player.GetNext())
	}

	Print(COLOR_7 + "# of peeps stored in array_myTeam is " + COLOR_5 + array_myTeam.length);
	return 1;
}
function d2B_storeTeamData() {
	array_myTeamArea.length = 0;	// reset the array
	var Player = GetPlayerUnit();
	if(Player){
		do{
			if(array_myTeamArea.indexOf(Player.name) == -1) array_myTeamArea.push(Player.areaid);
		}while(Player.GetNext())
	}
	return 1;
}
function d2B_comparePlayerNames() {
	array_myTeamCompare.length = 0;	// clears this temp team array
	
	var Player = GetPlayerUnit();
	if(Player){
		do{
			if(array_myTeamCompare.indexOf(Player.name) == -1) array_myTeamCompare.push(Player.name);
		} while(Player.GetNext())
	}
	_LOrig = array_myTeam.length;
	_LCompare = array_myTeamCompare.length;
	Print(COLOR_7 + "_LOrig = " + COLOR_3 + _LOrig + COLOR_7 + " _LCompare = " + COLOR_3 + _LCompare);
	
	
	if(_LOrig == _LCompare) Print(COLOR_7 + "All in!");
	else if(_LOrig != _LCompare) {
		Print(COLOR_7 + (_LOrig - _LCompare) + COLOR_6 + " are missing from the original group.");
		return 0;
	}
	return 1;
}
function d2B_teamInstructions() {
	var _locations = 	["coldPlains", "burialGrounds", "undergroundPassage", "blackMarsh"];
	var _ignoreRegMonsters = 	[false, false, false, false];
	
	for(i=1; i<=_locations.length; i++) {
		d2B_msg(array_myTeam[i] + " doact " + _locations[i-1] + " " + _ignoreRegMonsters[i-1] + " " + Random(1322,132274));
		Delay(Random(3000,4400));
	}
	d2B_teamCheckForRiver();
	
	return 1;
}
function d2B_teamCheckForRiver() {
	var _allAtRiver = false;
	var _all2		= 0;
		
	do{
		d2B_storeTeamData();	// scan players and store into an array the relative data
		Delay(Random(1400,2400));
		
		for(i = 1; i < array_myTeamArea.length; i++) {
			if(array_myTeamArea[i] != me.areaid) _all2 = _all2 + 1;
		}
		Delay(Random(2000,3000));
		Print(COLOR_7 + "Waiting fror peeps ti all be at the river wp...");
		(_all2 > 0) ? _all2 = 0 : _allAtRiver = true;
	}while(!_allAtRiver);
	
	Print(COLOR_7 + "Finally, everyone is at the river wp...");
	return 1;
}
//
function d2B_Peeps() {								// store name of leader & followers in storePeeps.txt
											// 
	var TheTime = MyTime();
	var Today = new Date().toLocaleFormat("%d %b");
	
	var Player = GetPlayerUnit();
	if(Player){
		do{
			if(_peeps.indexOf(Player.name) == -1){
				_peeps.push(Player.name);	
			}
		} while(Player.GetNext())
	}
	
	Delay(750);
	// send msg to _myName of the stored data
	
	_peepsNum = _peeps.length;
	
	for(i=1; i < _peeps.length; i++) {
		if(_msgMe) Say("/msg *" + _myName + " " + i + ". " + _peeps[i]);
		Delay(Random(5000,7000));
	}
	return;
}
function d2B_rPeepsInGame() {						// return (true, _teamSize) : _teamSize accounts for all extra peeps minus that boer
	Print(COLOR_3 + "Checking in on peeps");
	Delay(1000);
	if(_msgMe) Say("/msg *" + _myName + " Peep check-in");
	Delay(300);
	// for checking if everyone is in game...
	// if so, do continue
	// if not, check to see if enough tine has elapsed and if so exit game
	
	var allIn = true;
	var _teamSize = -1;	// -1 due to not wishing to account for the bo barb
	
	for(i=1; i < _peeps.length; i++) {
		if(!NTC_InMyParty(_peeps[i])) {
			_teamSize = _teamSize - 1;
			if(_msgMe) Print(COLOR_2 + _peeps[i] + " is not the game.");
			allIn = false;
			Delay(Random(3000,5000));
			if(_msgMe) Say("/msg *" + _myName + " " + _peeps[i] + " missing.");
		} else _teamSize = _teamSize + 1;
	}
	Delay(Random(3000,4000));
	if(_msgMe) Say("/msg *" + _myName + " Of the " + (_peeps.length - 1) + " extra peeps, there are " + (_teamSize));
	Delay(300);
	if(!allIn) return false;
	return true;
}

function d2B_peepsIn() {							//	check if the original number of peeps are still in game
	var Player = GetPlayerUnit();
	if(Player){
		do{
			if(_peeps.indexOf(Player.name) == -1){
				_peeps.push(Player.name);
			}
		} while(Player.GetNext())
	}
	if(_peepsNum != _peeps.length) {				// if a member is missing, then send the crew and the leader to act 1 town
		d2B_chkAct2(true,1);
		Delay(Random(6000,10000));
		d2B_msg("ummm 1");								// bring peeps to act 1
		Delay(Random(15000,20000));
		if(_msgMe) Say("/msg *" + _myName + " Some peeps are missing. Leaving and creating new game...");
		Delay(Random(4000,5000));
		
		NTC_SendMsgToScript("NTBotGame.ntj", "SCRIPT_END");	
	}
	return;
}

function d2B_msgIncPause() {
	Print(COLOR_4 + "Case mode # " + d2B_myPauseValue + " done.");
	Delay(Random(1500,2500));
	if(_msgMe) Say("/msg *" + _myName + " Case mode # " + d2B_myPauseValue + " done.");
	Delay(Random(1500,2500));
	d2B_myPauseValue = d2B_myPauseValue + 1;
	d2B_myPause = d2B_myPauseValue.toString();
	d2B_storePause(d2B_myPause);
	
	return;
}
function d2B_msgResetPauseEnd() {
	d2B_myPause = "1";
	d2B_storePause(d2B_myPause);
	Delay(Random(1500,2500));
	Print(COLOR_4 + "Starting another run at case # " + d2B_myPause);
	Delay(Random(1500,2500));
	if(_msgMe) Say("/msg *" + _myName + " Starting another run at case # " + d2B_myPause);
	Delay(Random(8500,12500));
	NTC_SendMsgToScript("NTBotGame.ntj", "SCRIPT_END");
}
function d2B_isTeamInTown(a,b) {					// a: act | b: area of where the tp is open in and to go to | b = false then stay put and wait for instructions 
	var Player = GetPlayerUnit();
	
	if(Player){
		while(Player.GetNext()) {
			if(me.areaid == Player.areaid) {
				d2B_msg("At least one peep is not in town.");
				Delay(Random(2000,3000));
				d2B_msg("..");							// tell peeps to not follow
				Delay(Random(1000,2000));
				NTTM_CheckAct(a);						// send leader to town
				d2B_msg(".");
				Delay(Random(4000,7000));
				d2B_msg(".");							// this may press peeps who are not in town to go to town
				Delay(Random(10000,16000));
				d2B_msg("..");
				if(b) {
					Delay(Random(2000,3000));
					NTM_UsePortal("BluePortal", b);	// go back to the place where the tp was made
				}
				//break;
				return;
			}
		}
	}
	d2B_msg("Everyone is in town.");
	return;
}
//
function d2B_LXPC_FindShrines(a) {	
	
	var ShrineIds = [2, 81, 83, 85, 86, 93, 96, 97, 109, 116, 120, 123, 124, 133, 134, 135, 
					136, 150, 151, 172, 173, 184, 190, 191, 197, 199, 200, 201, 226, 231, 
					232, 260, 275, 276, 277, 278, 279, 282, 299, 300, 303, 325, 361, 414, 
					415, 421, 422, 423, 427, 428, 464, 465, 472, 479, 483, 484, 488, 491, 
					492, 495, 497, 499, 503, 509, 512, 520, 521, 522];
	var ShrineLocs = [];
	var unit = GetPresetUnits(me.areaid);
	if(unit){	
		
		for (var j = 0; j < unit.length; j++){
			for (var c = 0; c < ShrineIds.length; c++) {				
				if (ShrineIds[c] == unit[j].id) ShrineLocs.push([unit[j].roomx*5+unit[j].x + 3,unit[j].roomy*5+unit[j].y])					
			}
		}
	}
	while(ShrineLocs.length > 0) {
		ShrineLocs.sort(SortRoomInt);
		var _room = ShrineLocs.shift();
		NTM_MoveTo(me.areaid, _room[0], _room[1]);		
		var shrine = NTC_FindUnit(NTC_UNIT_OBJECT, "shrine");

		if(shrine){
			do{		
				if(GetDistance(me.x,me.y,shrine.x,shrine.y)<5) {
					if(shrine.shrinetype == 15 && shrine.mode == 0) { 	
						ThisShrine = shrine;
						XpSearchContinue = false;									
						FoundShrineArea = me.areaid;									
						if(NTConfig_ClearAroundShrine) NTA_ClearPos(2, 15, 500, true);
						if(GetDistance(me, shrine) > 2) NTM_MoveTo(shrine.areaid, shrine.x+1, shrine.y);
						//NTM_MakeTP(true);
						Delay(500);
						if(ThisShrine) {
							while(!me.GetState(137) && !ThisShrine.mode && a) {
								NTC_CastSkill(43, NTC_HAND_RIGHT, ThisShrine);
							}
							NTC_Delay(100);
						}
						while(!me.GetState(137) && !ThisShrine.mode && !a) {
							NTM_GetCloserIntS(ThisShrine);
							Delay(100);
							NTM_MakeTP();
							Delay(700);
							NTM_UsePortal("BluePortal", 1);
							Delay(Random(1400,2000));
							d2B_moveWP();
							break;
						}
						if(a) NTTM_CheckAct(5);
					}
				}
			}while(shrine.GetNext());
		}
		if(NTC_InTown()) break;
	}
	NTTM_CheckAct();
}
//
function d2B_countess(_cnt) {
	if(me.y > 11060 && me.y <= 11078){
		NTM_MoveTo(me.areaid, 12544, 11066);
	}
	else{ 
		NTM_MoveTo(me.areaid, 12570, 11057);
	}
	_countess = NTC_FindUnit(NTC_UNIT_MONSTER, GetLocaleString(2875), 5);
	if(_countess) {
		if(me.y > 11060 && me.y <= 11078){
			if(_countess.y <= 11054)
				NTM_MoveTo(me.areaid, 12537, 11042);
			if(_countess.y > 11056 && _countess.y <= 11070){
				if(_countess.x < 12533)
					NTM_MoveTo(me.areaid, 12518, 11057);
				else
					NTM_MoveTo(me.areaid, 12548, 11057);
			}
			if(_countess.y > 11070 && _countess.y <= 11085){
				if(_countess.x < 12533)
					NTM_MoveTo(me.areaid, 12518, 11083);
				else
					NTM_MoveTo(me.areaid, 12548, 11083);
			}
			if(_countess.y > 11086)
				NTM_MoveTo(me.areaid, 12542, 11098);
		}
		else{
			if(_countess.x <= 12550){
				NTM_MoveTo(me.areaid, 12562, 11057);
				NTM_MoveTo(me.areaid, 12548, 11043);
			}
			if(_countess.x > 12550 && _countess.x <= 12561){
				if(_countess.y < 11027)
					NTM_MoveTo(me.areaid, 12577, 11043);
				else{
					NTM_MoveTo(me.areaid, 12565, 11043);
					NTM_MoveTo(me.areaid, 12577, 11025);
				}
			}
			if(_countess.x > 12561 && _countess.x <= 12579){
				if(_countess.y < 11027)
					NTM_MoveTo(me.areaid, 12555, 11043);
				else{
					NTM_MoveTo(me.areaid, 12565, 11043);
					NTM_MoveTo(me.areaid, 12555, 11025);
				}
			}
			if(_countess.x > 12579){
				NTM_MoveTo(me.areaid, 12578, 11057);
				NTM_MoveTo(me.areaid, 12582, 11043);
			}
		}
		if(!_cnt) {	// if false, just make a tp and town 
			Town();
			return;
		}
		d2B_team(true);
	}	
	return;
}
function d2B_dollsoulChk() {
	// GetLocaleString(2903) = undead stygian doll | GetLocaleString(2904) = undead soul killer
	if(NTC_FindUnit(NTC_UNIT_MONSTER, GetLocaleString(2904)) || NTC_FindUnit(NTC_UNIT_MONSTER, GetLocaleString(2903))) {
		if(!NTM_UsePortal("BluePortal", 109, me.charname)) {
			NTM_MakeTP();
			Delay(100);
			NTTMGR_VisitTown();
		}
		Delay(300);
		Print(COLOR_4 + "Oops... Souls & dolls!");
		Delay(Random(4000,5000));
		Say("/msg *" + _myName + " Oops... Souls & dolls!");
		Delay(300);
		NTTM_CheckAct(5);
		Delay(Random(3000,5000));
		return true;
	}
	return false;
}
function NT_ClearThroneInt() {
	var _attackpos = [15112, 5068, 15075, 5065, 15114, 5045, 15114, 5012, 15095, 5024, 15078, 5013, 15092, 5040];
	for(var i = 0 ; i < _attackpos.length ; i += 2){
		NTM_MoveTo(me.areaid, _attackpos[i], _attackpos[i+1]);
		NTA_ClearPosition(25, true, 2);
	}
	return;
}
function d2B_throneWaves() {
	if(!_quiet) d2B_msg(".");
	Delay(100);
	while(1){
		NTC_Delay(100);
		NTM_MoveTo(me.areaid, prewavespot[0], prewavespot[1]);
		if(me.GetState(2))
			NTC_PutSkill(109, NTC_HAND_RIGHT);
		for(i = 0 ; i < 6 ; i++){
			_wave = NT_ThroneCheckInt();
			if(_wave > 0)
				break;
			NTC_Delay(500);
		}
		_starttick = GetTickCount();
		while(_wave == 0){
			if(!NT_ThronePreAttackInt())
				NTC_Delay(200);
			if(GetTickCount()-_starttick > 17000){
				NT_ClearThroneInt();
				_starttick = GetTickCount();
			}
			_wave = NT_ThroneCheckInt();
		}
		switch(_wave){
			case 1:
				if(NTConfig_PreWaveTele){
					NTM_TeleportTo(me.x+1, me.y+3);
                }
				NTA_ClearPosition(40, true, 2);
				NTP_DoPrecast(true);
				if(!_quiet && _throneLeechers) Say("yo");
				break;
			case 2:
				if(NTConfig_PreWaveTele){
					NTM_TeleportTo(me.x+1, me.y+3);
                }
				if(NTConfig_HolyBoltBaal){
					if (me.classid == NTC_CHAR_CLASS_PALADIN && NTConfig_AttackSkill[5] == 101)
						achmel();
				}
				NTA_ClearPosition(40, true, 2);
				if(NTConfig_Wave2PSNCheck && me.GetState(2) != -1){
					NTTMGR_VisitTown();
				}
				//d2B_msg("yo");
				if(!_quiet && _throneLeechers) Say("yo");
				Delay(700);
				break;
			case 3:
			    if(!_quiet) d2B_msg(".");
			    Delay(100);
				if(NTConfig_PreWaveTele){
					NTM_TeleportTo(me.x+1, me.y+3);
                }
				NTA_ClearPosition(40, true, 2);
				if(NTConfig_Wave3Move > 0){
					NT_CheckHydraInt();
				}
				else {
					//d2B_msg("yo");
					if(!_quiet && _throneLeechers) Say("yo");
					NTC_Delay(3000);
				}
				break;
			case 4:
			   if(!_quiet) d2B_msg(".");
			   Delay(100);
				if(NTConfig_PreWaveTele){
					NTM_TeleportTo(me.x+1, me.y+3);
                }
				NTA_ClearPosition(40, true, 2);
				break;
			case 5:
				if(NTConfig_PreWaveTele){
					NTM_TeleportTo(me.x+1, me.y+3);
                }
				NTA_ClearPosition(40, true, 2);
				break;
			default:
				if(NTConfig_PreWaveTele){
					NTM_TeleportTo(me.x+1, me.y+3);
                }
				NTA_ClearPosition(40, true, 2);
				break;
		}
		if(_wave != 0) // Need to force a one time cast/wave Assassin only
			_trapsPreCasted = false;
		if(_wave >= 5)
			break;
	}
	return;
}
function NT_ClearThroneInt(){
	var _attackpos = [15112, 5068, 15075, 5065, 15114, 5045, 15114, 5012, 15095, 5024, 15078, 5013, 15092, 5040];
	for(var i = 0 ; i < _attackpos.length ; i += 2){
		NTM_MoveTo(me.areaid, _attackpos[i], _attackpos[i+1]);
		NTA_ClearPosition(25, true, 2);
	}
}

function NT_ThroneCheckInt() {
	var _monster;
	if(!NTC_FindUnit(NTC_UNIT_MONSTER, 543))
		return 5;
	_monster = NTC_FindUnit(NTC_UNIT_MONSTER);
	if(_monster){
		do{
			if(NTA_IsValidMonster(_monster)){
				if(_monster.classid == 23 || _monster.classid == 62)
					return 1;
				if(_monster.classid == 105 || _monster.classid == 381)
					return 2;
				if(_monster.classid == 557)
					return 3;
				if(_monster.classid == 558)
					return 4;
				if(_monster.classid == 571)
					return 5;
			}
		} while(_monster.GetNext());
	}
	return 0;
}

function NT_ThronePreAttackInt(){
	if(me.classid == NTC_CHAR_CLASS_SORCERESS){
		if(NTConfig_PreWaveSpam > 0){
			if(poscount == 1){
				poscount = 2;
				return NTC_CastSkill(NTConfig_PreWaveSpam, 0, KBLSpamPos[0], KBLSpamPos[1]);
			}
			else if(poscount == 2){
				poscount = 3;
				return NTC_CastSkill(NTConfig_PreWaveSpam, 0, KBLSpamPos[2], KBLSpamPos[3]);
			}
			else{
				poscount = 1;
				return NTC_CastSkill(NTConfig_PreWaveSpam, 0, KBLSpamPos[4], KBLSpamPos[5]);
			}
		}
	}
	else if(me.classid == NTC_CHAR_CLASS_DRUID){
		if(NTConfig_AttackSkill[3] == 245){
			if(!DruidPreAtt[2]){
				return NTC_CastSkill(NTConfig_AttackSkill[3], 2, DruidPreAtt[0], DruidPreAtt[1]);
			}
			else{
				if(poscount == 1){
					poscount = 2;
					return NTC_CastSkill(NTConfig_AttackSkill[3], 2, DruidPreAtt[0], DruidPreAtt[1]);
				}
				else if(poscount == 2){
					poscount = 3;
					return NTC_CastSkill(NTConfig_AttackSkill[3], 2, (DruidPreAtt[0]+3), DruidPreAtt[1]);
				}
				else{
					poscount = 1;
					return NTC_CastSkill(NTConfig_AttackSkill[3], 2, (DruidPreAtt[0]+5), DruidPreAtt[1]);
				}
			}
		}
	}
	else if(me.classid == NTC_CHAR_CLASS_NECROMANCER){
		if(NTConfig_PreWaveSpam > 0)
			return NTC_CastSkill(NTConfig_PreWaveSpam, _NTA_SkillHand[NTConfig_PreWaveSpam], NecroPreAtt[0], NecroPreAtt[1]);
	}
	else if(me.classid == NTC_CHAR_CLASS_PALADIN){
		if(NTConfig_AttackSkill[3] == 112){
			NTC_PutSkill(NTConfig_AttackSkill[3], NTC_HAND_LEFT);
			NTC_PutSkill(NTConfig_AttackSkill[4], NTC_HAND_RIGHT);
			return NTC_CastSkill(NTConfig_AttackSkill[3], 2, 15092, 5028);
		}
	}
	else if(me.classid == NTC_CHAR_CLASS_ASSASSIN){
		var _attackPos = [15088,5023,15087,5032,15098,5022,15101,5034,15094,5029];
		if(NTConfig_UseTraps && !_trapsPreCasted){
			for(var i=0;i<5;i++) {
				if(i == 0 || i == 2 || i == 3) // Added delays to prevent trap miscast
					NTC_Delay(25);
				if(NTConfig_TrapSet[i] > 0)
					NTC_CastSkill(NTConfig_TrapSet[i], NTC_HAND_RIGHT, _attackPos[i*2],_attackPos[(i*2)+1]);
			}
			_trapsPreCasted = true;
		}
		if(NTConfig_AttackSkill[3] == 256)
			if(me.GetSkillStatus(NTConfig_AttackSkill[3]) != 8)
				return NTC_CastSkill(NTConfig_AttackSkill[3], 2, 15093, 5030);
	}
	return false;
}

function NT_CheckHydraInt() {
	var _hydra1, _hydra2, _hydra3;
	_hydra1 = NTC_FindUnit(NTC_UNIT_MONSTER, 351);
	_hydra2 = NTC_FindUnit(NTC_UNIT_MONSTER, 352);
	_hydra3 = NTC_FindUnit(NTC_UNIT_MONSTER, 353);
	if((_hydra1 && _hydra1.GetStat(172) != 2 && _hydra1.GetState(105))
	  || (_hydra2 && _hydra2.GetStat(172) != 2 && _hydra2.GetState(105))
	  || (_hydra3 && _hydra3.GetStat(172) != 2 && _hydra3.GetState(105))){
		if(NTConfig_Wave3Move == 1)
			NTM_MoveTo(me.areaid, 15112, 5004); // right side
		else if(NTConfig_Wave3Move == 2)
			NTM_MoveTo(me.areaid, 15073, 5002); // left side
		if(me.GetState(2))
			NTC_PutSkill(109, NTC_HAND_RIGHT);
		NTC_PingDelay(3000);
	}
}

function achmel() {
	var x = 0;
	var _holdTargetHp = 0;
	var _achmel = NTC_FindUnit(NTC_UNIT_MONSTER, GetLocaleString(21852));
	while (_achmel && _achmel.hp > 0){
		_holdTargetHp = _achmel.hp;
		if (NTConfig_AttackSkill[6] > -1){ NTC_PutSkill(NTConfig_AttackSkill[6], NTC_HAND_RIGHT);}
		for(var i = 0; i < 5 ; i++){
			NTC_CastSkill(NTConfig_AttackSkill[5], NTC_HAND_LEFT, _achmel);
		}
		if(_holdTargetHp <= _achmel.hp && NTConfig_WalkAround) {
			x++;
			if(x % 2 == 0)
				NTM_WalkTo(me.x+10, me.y);
			else
				NTM_WalkTo(me.x-10, me.y);
		}
	}
	var _company = NTC_FindUnit(NTC_UNIT_MONSTER, 105);
	do{
		while (_company != null && _company.hp >0 && !_company.GetState(53) && !_company.GetState(96)){
			_holdTargetHp = _company.hp;
			for(var i = 0; i < 5 ; i++){
				NTC_CastSkill(NTConfig_AttackSkill[5], NTC_HAND_LEFT, _company);
			}
			if(_holdTargetHp <= _company.hp && NTConfig_WalkAround) {
				x++;
				if(x % 2 == 0)
					NTM_WalkTo(me.x+10, me.y);
				else
					NTM_WalkTo(me.x-10, me.y);
			}
		}
	} while (_company && _company.GetNext());
}
function d2B_manualBaal() {
	var _portal;
	NTM_MoveTo(me.areaid, 15089, 5006);
	NTP_DoPrecast(true);
	Delay(300)
	
	for(var i = 0; i < 60; i++) {
		Delay(500);
		if(!NTC_FindUnit(NTC_UNIT_MONSTER, 543)) break;
	}
	
	_portal = NTC_FindUnit(NTC_UNIT_OBJECT, 563, 1);
	if(!_portal) return;
	if(!NTM_UsePortal("Portal", 132, null, _portal)) return; 
	
	NTM_MoveTo(me.areaid, 15138, 5916);
    MGConfig_PickItems = true;
	MGConfig_PickAuto = true;
	Print(COLOR_2 + "MGConfig_PickItems" + COLOR_5 + MGConfig_PickItems);
	Delay(Random(1000,1700));
	Print(COLOR_5 + "MGConfig_PickAuto" + COLOR_2 + MGConfig_PickAuto);
}
function d2B_initCharVars() {
	NTConfig_SkipRegularMonsters = false;
	NTConfig_ShareExpShrine = false;				// Cleare around exp shrines and TP? (Will not grab experience shrines if true.)
	NTConfig_Shrines = [0,0,0,0,0];
	
	if(me.classid == NTC_CHAR_CLASS_SORCERESS) {
		NTConfig_AttackSkill[0]  = -1; 	// First skill. Maybe slow missiles
		NTConfig_AttackSkill[1]  = 53; 	// Primary skill to super unique/champion.
		NTConfig_AttackSkill[2]  = -1; 	// Primary untimed skill to super unique/champion.
		NTConfig_AttackSkill[3]  = 53; 	// Primary skill to others.
		NTConfig_AttackSkill[4]  = -1; 	// Primary untimed skill to others.
		NTConfig_AttackSkill[5]  = 53; 	// Secondary skill in case monster is immune to primary skill.
		NTConfig_AttackSkill[6]  = -1; 	// Secondary untimed skill.
		NTConfig_AttackSkill[7]  = 53; 	// Tertiary skill to everything else in case monster is immune to both primary and secondary.
		NTConfig_AttackSkill[8]  = -1; 	// Tertiary untimed skill.
		NTConfig_AttackSkill[9]  = 49; 	// Primary skill to boss (diablo/meph/Duriel/andy)
		NTConfig_AttackSkill[10] = 49; 	// Primary skill to baal this MUST be set if you do baal charged bolt works well here

		NTConfig_ChainLightOnLightImmunes = false;			// Set true to use Chain Lighning automatically on light immune mobs.
		NTConfig_EnchantSelf = false;						// Set true to chant self during Precasts
		NTConfig_DancingSorc = false;						// Periodically teleport between attacks, settings below.
		NTConfig_AttackJump = 5;							// # of attacks before teleporting.
		NTConfig_BounceRange = 9;							// Range away from mob to keep when teleporting.
		NTConfig_DanceStartHp = 78;  						// Auto dance if below this % health? (Set -1 to disable, 101 to always.)
		NTConfig_DanceStartMp = -1;							// Auto dance if below this % mana? (Set -1 to disable, 101 to always.)

		NTConfig_DiaSpam = 0;			// Skill to spam before Diablo Spawns
		NTConfig_SetDiablo = 0;			// leechers (only) stop attacking Diablo after x% - valid values 0 to 100
		NTConfig_SetBaal = 0;			// leechers (only) stop attacking Baal after x% - valid values 0 to 100

		prewavespot = [15092, 5040];							// Pre-Wave standing (X,Y) coordinates. (For Baal Scripts.)
		NTConfig_PreWaveSpam = 0;								// Attack skill to spam between waves.  Set "0" to disable.
		KBLSpamPos = [15090, 5028, 15099, 5028, 15093, 5028];	// (X,Y) coordinates to attack with NTConfig_PreWaveSpam.


		NTconfig_HighMaxAttack = false;						// Use HighMaxAttacks? (False = LowMaxAttacks.) High/Low are below.
		NTConfig_HighMaxAttackAreas = [131];				// If above is set false (you're using LowMaxAttacks), add areas to bypass LowMaxAttacks and use HighMaxAttacks instead. (Recommended in Baal's Throne Room.)

		NTConfig_HighMaxAttacks = 300;						// Maximum number of attacks (HIGH) before skipping.
		NTConfig_LowMaxAttacks = 20;						// Maximum number of attacks (LOW) before skipping.

		MonstersToAttackFirst = 							// Monster ID's to attack first. (Monsters which resurrect / spawn others are good choices.)
		[58,59,60,61,62,101,102,103,104,190,191,
		192,193,194,206,207,208,209,228,239,240,
		241,278,279,280,281,282,283,303,312,480,
		481,482,483,484,485,486,529];

		NTConfig_AttackingThis = false; // Used to say target monsters ID/Name - Primarily for Dev purposes
		NTConfig_CheckSelfSafe = ['01'];
		NTConfig_CheckMercSafe = ['01'];
		NTConfig_CastStatic = 100;
		
		return 1;
	}
	return 1;
}
/*	Extra shtuff...

	if(me.GetQuest(4, 0)) {
		Print(COLOR_2 + "The The Search For Cain Quest Is Already Completed");
		if(!NTM_UsePortal("BluePortal", 1) Town();
		break;
	}
*/	
