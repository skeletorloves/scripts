// d2B_hairyKnuckles.ntj

// globals at the end of script

// _____________________________________________________________________________________________________________________________
//
// LeaderStarter.ntj.
//

function NTMain() {

	Delay(1000);

	var _ingame = false;

	controlData.clickDelay = clickDelay;
	controlData.textDelay = textDelay;
	controlData.clickDelayRandom = clickDelayRandom;
	controlData.textDelayRandom = textDelayRandom;
	NTLG_Log("NTBot.ntj", NTLG_TYPE_LOG, NTLG_LEVEL_INFO);
	while(1)
	{
		if(me.ingame)
		{
			if(!inGameAt)
				inGameAt = GetTickCount();

			if(!_ingame)
			{
				RunGC(); // run garbage collector between each game

				if(Load("NTBot/NTBotGame.ntj"))		// deeEdits: replaced Load("NTBot/NTBotGame.ntj") with 
				{
					_ingame = true;
					NT_File("logs/messagecomands/"+me.charname+"-nextgame.txt", 1, me.gamename + "/" + me.gamepassword); // for leader to print game/pw to txt	 	

					if(me.playtype > 0) {
						NTLG_Log("NTBot.ntj", NTLG_TYPE_LOG, NTLG_LEVEL_INFO, "In Game[IP:" + me.gameserverip.split(".")[3] + "]");
						sendEventToOOG(D2NT_MGR_INGAME, "In Game[IP:" + me.gameserverip.split(".")[3] + "]", 0);

					} else {
						NTLG_Log("NTBot.ntj", NTLG_TYPE_LOG, NTLG_LEVEL_INFO, "In Game");
						sendEventToOOG(D2NT_MGR_INGAME, "In Game", 0);
					}
						if(WhisperFList) {
							FriendMessage = "/f m in_new_game " + me.gamename;
							//if(saypassword) FriendMessage = FriendMessage + "//" + me.gamepassword;
							Say(FriendMessage); Delay(Random(500,1000)); // this is for leechers to join only after leader is in game
						}
					lastGameStatus = 2; // in game successful
				}
			}

			Delay(1000);
			NTLG_FlushLogQueue();
		}
		else
		{
			
			if(_ingame)
			{
				My_ExitGame_Check(); // out of korean modded d2nt fixes white screen of death

				_ingame = false;

				sendEventToOOG(D2NT_MGR_READY, "", 0);
			}

			locationAction(controlData.getLocation());

			Delay(500);
		}
	}
}

function locationAction(location) {
	switch(location.id)
	{
	case 3: // Lobby Chat
		//ftjcheck
		if (ftjcount >= 10 && lastGameStatus == 1) {
			sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "FTJ detected...........Idling", 0);
			ftjcount = 0;
			inGameAt = 0;
			lastGameStatus = 0;
			setNextGameMake();
			locationTimeout(ftjDelay*1000, location);
		}
		if(!chatActionsDone)
		{
			chatActionsDone = true;
			Delay(Random(waitInChatBeforeActionsMin, waitInChatBeforeActionsMax));

			if(joinRandomChannel || joinChannelInChat != "")
			{
				Say("/join " + (joinRandomChannel ? getRandomString(Random(3,10)) : joinChannelInChat));
				Delay(1000);
					if(!alreadyLoggedIn){
   					alreadyLoggedIn = true;
					if (chatMessageOnJoin.length > 0){
						Say(chatMessageOnJoin);
					}
					}
				Delay(500);
				chatActionsDone = true;
			}
		}
	case 1:	// Lobby
		//ftjcheck
		if (ftjcount >= 10 && lastGameStatus == 1) {
			sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "FTJ detected...........Idling", 0);
			ftjcount = 0;
			inGameAt = 0;
			lastGameStatus = 0;
			setNextGameMake();
			locationTimeout(ftjDelay*1000, location);
		}
		if(location.id == 1 && joinChatAfterGame)
		{
			Delay(Random(waitBeforeEnterChatMin, waitBeforeEnterChatMax));
			controlData.click(controlData.controls.lobby.button.enterChat);
			break;
		}
		//LogPrintSimple(me.account + "MyAccountTest.txt", me.account + " / " + me.charname) // this is to check for 2nd account login

		if(GetTickCount() > nextGameMake)
		{
			lastGameFailed = false;

			switch(lastGameStatus)
			{
			case 0:	
				password = (me.gamepassword);
				game = (getGameName(me.gamename));
				counter = (getGameCounter(me.gamename, false));
				time = (parseInt((nextGameMake - GetTickCount() - tempDelay)/1000+3.0));
				if (saygamename){{
					gameInfo += nextgamemessage + " " + game + counter;
				}
					if (saypassword){
					gameInfo += "//" + password
					}
						if (saytime){
						gameInfo += " " + timemessage + " " + time + " seconds"
						}
				}
				if(joinChatAfterGame){
					if(chatMessageAfterGame1.length > 0){
						Say(chatMessageAfterGame1);
						if(chatMessageAfterGame1.length > 0){
							Delay(tempDelay);
						}
					}
					if(chatMessageAfterGame2.length > 0){
						Say(chatMessageAfterGame2);
							if(chatMessageAfterGame2.length > 0){
								Delay(tempDelay);
							}
					}
					if(chatMessageAfterGame3.length > 0){
						Say(chatMessageAfterGame3);
						if(chatMessageAfterGame3.length > 0){
							Delay(tempDelay);
						}
					}
					if(chatMessageAfterGame4.length > 0){
						Say(chatMessageAfterGame4);
						if(chatMessageAfterGame4.length > 0){
							Delay(tempDelay);
						}
					}
					if(chatMessageAfterGame5.length > 0){
						Say(chatMessageAfterGame5);
						if(chatMessageAfterGame5.length > 0){
							Delay(tempDelay);
						}
					}
					if(saygamename) {
						if(bugignor){
							bugignor = false;
							gameInfo = "";
						}
					else{
						Say(gameInfo)
						Delay(tempDelay)
						gameInfo = "";
					}
					}
				}
				_control = controlData.get(controlData.controls.lobby.button.create); // fixes creation stuck button bug out of unmodded d2nt
				if(_control && _control.pressed)
				{
					controlData.click(controlData.controls.lobby.button.join);
					Delay(500);
				}

				controlData.click(controlData.controls.lobby.button.create);
				_control = controlData.get(controlData.controls.lobby.create.button.useCharacterDifference);
				if(_control && !_control.pressed)
				{
					controlData.click(controlData.controls.lobby.create.button.useCharacterDifference);//checks the use character diff box...does this every time so no go
				}
				controlData.setText(controlData.controls.lobby.create.editBox.characterDifference,(characterdiff)); //level restriction
				controlData.setText(controlData.controls.lobby.create.editBox.maxNumberOfPlayers, (maxNumberOfPlayersss)); //max players
				nextGameMake = GetTickCount() + createGameTimeout; // set our timeout
				sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name, 0);
				break;
			case 1: // game failed, rollover to reset timer
				inGameAt = GetTickCount(); // reset inGameAt, to wait how long we should have waited..
				lastGameFailed = true;
			case 2:
				outputGameLength();
				lastGameStatus = 0;
				setNextGameMake();
				sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name, 0);
				break;
			}
		}
		else
			timeoutDelay(nextGameMake-GetTickCount(), location, true);
		break;

	case 2: // Waiting In Line
		if(GetTickCount()-lastGameMade > waitInLineTimeout)
			controlData.click(controlData.controls.lobby.inLine.button.cancel);
		break;

	case 4: // Create Game
		sendEventToOOG(D2NT_MGR_CREATE_GAME, location.name, 0);
		
		locationTimeout(5000, location);
		
		lastGameMade = GetTickCount();
		lastGameStatus = 1; // pending creation
		break;

	case 5: // Join Game
		break;

	case 6: // Ladder
		break;

	case 7: // Channel List
		break;

	case 8: // Main Menu
		if(controlData.getCurrentRealmIndex() == me.gatewayid)
		{
			outputGameLength();
			controlData.click(controlData.gameTypes[me.playtype]);
		}
		else
			controlData.click(controlData.controls.mainMenu.button.gateway);
		break;

	case 9: // Login
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name, 0);
		Delay(loginDelay);

		controlData.setText(controlData.controls.login.editBox.accountName, me.account);

		sendEventToOOG(D2NT_MGR_LOGIN, location.name, 0);

		locationTimeout(5000, location);
		break;

	case 10: // Login Error (this is a fatal error, so stop)
        sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "Bad Account or PW Entered.......Idling", 0);
		while(1) { Delay(500); }        		
		sendEventToOOG(D2NT_MGR_RESTART, location.name, 10);
		Delay(3500);
		break;

	case 11: // Unable To Connect
		timeoutDelay(unableToConnectRetry*60*1000, location)
		controlData.click(controlData.controls.login.unableToConnect.button.ok);
		break;

	case 12: // Character Select
		var _time, _control;

		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name, 0);

		for(_time = 0 ; _time < characterScreenTimeout ; _time += 500)
		{
			_control = controlData.get(controlData.controls.characterSelect.textBox.characterInfo[me.charloc]);
			if(_control && _control.GetText() != undefined)
				break;

			Delay(500);
		}

		if(_time < characterScreenTimeout)
		{
			Delay(characterSelectDelay);

			controlData.click(controlData.controls.characterSelect.textBox.characters[me.charloc], 0, 0, 1);
			controlData.click(controlData.controls.characterSelect.textBox.characterInfo[me.charloc], 0, 0, 1);

			// reset last game made, so it doesnt make a game immediately
			inGameAt = 0;
			setNextGameMake();
		}
		else
		{
			controlData.click(controlData.controls.characterSelect.button.exit);
			timeoutDelay(realmDownRetry*60*1000, location);
		}
		break;

	case 13: // Realm Down - Character Select screen
		controlData.click(controlData.controls.characterSelect.button.exit);
		timeoutDelay(realmDownRetry*60*1000, location);
		break;

	case 14: // Character Select - Disconnected
		timeoutDelay(disconnectedRetry*60*1000, location);
		controlData.click(controlData.controls.characterSelect.disconnected.button.ok);
		break;

	case 15: // New Character
		break;	

	case 16: // Character Select - Please Wait popup
		if(!locationTimeout(pleaseWaitTimeout, location))
			controlData.click(controlData.controls.characterSelect.pleaseWait.button.cancel);
		break;

	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		controlData.click(controlData.controls.lobby.lostConnection.button.ok);
		break;

	case 18: // D2 Splash
		controlData.click(controlData.controls.d2Splash.textBox.copyright);
		break;

	case 19: // Login - Cdkey In Use
		timeoutDelay(cdkeyInUseRetry*60*1000, location);
		controlData.click(controlData.controls.login.cdkeyInUse.button.ok);
		break;

	case 20: // Single Player - Select Difficulty
		controlData.click(controlData.singlePlayerDifficulties[me.diff]);
		break;

	case 21: // Main Menu - Connecting
		if(!locationTimeout(connectingToBnetTimeout, location))
			controlData.click(controlData.controls.mainMenu.connecting.button.cancel);
		break;

	case 22: // Login - Invalid Cdkey (classic or xpac)
        sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "Bad CD Key...........Idling", 0);
		while(1) { Delay(500); }		
		sendEventToOOG(D2NT_MGR_RESTART, location.name, 3600);
		Delay(3500);
		break;	

	case 23: // Character Select - Connecting
		if(!locationTimeout(characterScreenTimeout, location))
			controlData.click(controlData.controls.characterSelect.button.exit);
		break;

	case 24: // Server Down - not much to do but wait..
		break;

	case 25: // Lobby - Please Wait
		if(!locationTimeout(pleaseWaitTimeout, location))
			controlData.click(controlData.controls.lobby.pleaseWait.button.cancel);
		break;

	case 26: // Lobby - Game Name Exists
		sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "Game already exists", 0);

		inGameAt = 0;
		lastGameStatus = 0;
		setNextGameMake();

		locationTimeout(15000, location);
		break;

	case 27: // Gateway Select
		controlData.clickRealmEntry(me.gatewayid);
		controlData.click(controlData.controls.gateway.button.ok);
		break;

	case 28: // Lobby - Game Does Not Exist
		inGameAt = Random(gameDoesNotExistDelayMin, gameDoesNotExistDelayMax);
		//Delay(inGameAt);
		lastGameStatus = 0;
		setNextGameMake();

		locationTimeout(gameDoesNotExistTimeout, location);
		break;
	default:
		if (lastGameStatus == 1) {
			sendEventToOOG(D2NT_MGR_PRINT_STATUS, "Please Wait...", 0);
			for (ftjcount=0; ftjcount<=10 && !me.ingame; ftjcount++) {
				Delay(1000)
			}
		}
		DebugInOOG("Unhandled location : "+location.id);
		break;
	}
	DebugInOOG("Location : "+location.id);
}

function sendEventToOOG(locationId, statusString, pendingTime) {
	return SendCopyData("D2NT Manager", null, (locationId<<16)|pendingTime, statusString);
}

function setNextGameMake() {
	lastGameMade = GetTickCount();
	nextGameMake = lastGameMade + createGameThreshold + Random(0-createGameThresholdRandom, createGameThresholdRandom) + inGameAt;
	inGameAt = 0;
	chatActionsDone = false;
}

function outputGameLength() {
	if(inGameAt)
	{
		duration = GetTickCount() - inGameAt;

		inGameAt = (duration < gameMinLength ? gameMinLength - duration : 0);
	}
}

function locationTimeout(time, location) {
	endtime = GetTickCount() + time;

	while(controlData.getLocation().id == location.id && endtime > GetTickCount())
	{
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name + " (" + parseInt((endtime-GetTickCount())/1000) + "s)", 0);
		Delay(500);
	}

	return (controlData.getLocation().id != location.id);
}

function timeoutDelay(time, location) {
	endtime = GetTickCount() + time;

	while(endtime > GetTickCount())
	{
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name + " (" + parseInt((endtime-GetTickCount())/1000) + "s)", 0);
		Delay(1000);
		if(me.ingame){ Delay(1000); return;}
	}
}

function getRandomString(_length) {
	_retString = "";
	_charSet = "0123456789abcdefghijklmnopqrstuvwxyz";

	while(_length--)
	{
		_retString += _charSet.charAt(Random(0, _charSet.length-1));
		Delay(1);
	}

	return _retString;
}
function getGameName(lastGameString) {
   if(!lastGameString)
      return "";
   else
      return (lastGameString.split("-")[0] + "-");
}

function getGameCounter(lastGameString, simple) {
   var myCount;
   if(!lastGameString)
      return "-1";
   else
   {
      switch(lastGameString.split("-")[1])
      {
         case "08":
            myCount = 9;
            break;
         case "09":
            myCount = 10;
            break;
		case "99":
			myCount = 00;
			break;
         default:
            myCount = parseInt(lastGameString.split("-")[1]) + 1;
            break;
      }
      if(!simple)
      {
         if(myCount <= 9)
            return ('0' + myCount);
      }
      return myCount;
   }
}

function My_ExitGame_Check() {
    for (var i = 0; i < 40; i++)
    {
        if (controlData.getLocation().id != undefined)
            break;

        if (i > 38)
        {
            LogPrintSimple(me.account + " StarterTest.txt", "White Screen of Death: Restarting")
			sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "White Screen of Death: Restarting", 0);
            sendEventToOOG(D2NT_MGR_RESTART, "", 5);
            My_Delay(); // make sure and add this also
        }

        Delay(500);
    }
}

function My_Delay(retry) {
    if (arguments.length < 1)
        retry = 20;

    while (retry-- > 0)
        Delay(1000);
}

function LogPrintSimple(filepath, mesg){ 

	var _filepath = filepath;
	var _mesg = mesg;
	
	var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
	var logfile = FileOpen(_filepath, 2); // opens file 
	if(!logfile)
		var logfile = FileOpen(_filepath, 1); // if file not there then creates it

	logfile.WriteLine(date + " " + _mesg );
	logfile.Close();
}

// modes 0 = read only, 1 = overwrite the file, 2 = add to file
function NT_File(path, mode, msg, delay) { //big thanks to all the koreans out there
    var _msg  = "";
    var _line = "";
    var _fileHandle;
    var _isFileCheck = false;

    if (arguments.length < 3) { msg   = ""; }
    if (arguments.length < 4) { delay = (mode > 0) ? 5 : 2; }

    while (delay--) {
        if (mode == 2 && !_isFileCheck) {
            _fileHandle = FileOpen(path, 0);
            if (!_fileHandle)
                _fileHandle = FileOpen(path, 1);

            if (_fileHandle)
                _fileHandle.Close();

            _isFileCheck = true;
        }

        _fileHandle = FileOpen(path, mode);
        if (_fileHandle)
            break;

        if (delay)
            Delay(200);
    }

    if (_fileHandle) {
        if (mode == 0) {
            while (!_fileHandle.eof) {
                _line = _fileHandle.ReadLine();
                if (_line || !_fileHandle.eof)
                    _msg += _line + msg;
            }
        }
        else if (msg)
            _fileHandle.WriteLine(msg);

        _fileHandle.Close();
    }

    return _msg;
}

function DebugInOOG(logString) {
    if (Debug)
        return SendCopyData("D2NT Manager", null, 9<<16, "-- Debug : " + logString);
    else
        return false;
}







//
//	controlInfo.ntl
//

function controlInfo() {
	this.controls							= new Array();
	this.controls.lobby						= new Array();
	this.controls.lobby.name					= "Lobby";
	this.controls.lobby.id						= 1;

	this.controls.lobby.textBox					= new Array();
	this.controls.lobby.textBox.chat				= [4,28,410,354,298];
	this.controls.lobby.textBox.status				= [4,447,398,290,269];
	this.controls.lobby.textBox.characterInfo			= [4,143,588,230,87];

	this.controls.lobby.button					= new Array();
	this.controls.lobby.button.create				= [6,533,469,120,20];
	this.controls.lobby.button.join					= [6,652,469,120,20];
	this.controls.lobby.button.channel				= [6,535,490,80,20];
	this.controls.lobby.button.ladder				= [6,614,490,80,20];
	this.controls.lobby.button.quit					= [6,693,490,80,20];
	this.controls.lobby.button.enterChat				= [6,27,480,120,20];
	this.controls.lobby.button.help					= [6,146,480,120,20];

	this.controls.lobby.location = [
		this.controls.lobby.button.enterChat,
		this.controls.lobby.button.help,
	];


	this.controls.lobby.inLine					= new Array();
	this.controls.lobby.inLine.name					= "Waiting In Line";
	this.controls.lobby.inLine.id					= 2;

	this.controls.lobby.inLine.textBox				= new Array();
	this.controls.lobby.inLine.textBox.inLine			= [4,427,234,300,100];

	this.controls.lobby.inLine.button				= new Array();
	this.controls.lobby.inLine.button.cancel			= [6,433,433,96,32];
	
	this.controls.lobby.inLine.location = [
		this.controls.lobby.inLine.textBox.inLine,
		this.controls.lobby.inLine.button.cancel,
	];

	this.controls.lobby.serverDown					= new Array();
	this.controls.lobby.serverDown.name				= "Server Down";
	this.controls.lobby.serverDown.id				= 24;

	this.controls.lobby.serverDown.textBox				= new Array();
	this.controls.lobby.serverDown.textBox.serverDown		= [4,438,300,326,150];
	this.controls.lobby.serverDown.textBox.serverDown.key		= [5139];

	this.controls.lobby.serverDown.location = [
		this.controls.lobby.serverDown.textBox.serverDown,
	]

	// this is also the Please Wait dialog in the lobby, as well as Character Already Exists for creating chars
	this.controls.lobby.pleaseWait					= new Array();
	this.controls.lobby.pleaseWait.name				= "Please Wait...";//"Lost Connection";
	this.controls.lobby.pleaseWait.id				= 25;
	
	this.controls.lobby.pleaseWait.textBox				= new Array();
	this.controls.lobby.pleaseWait.textBox.pleaseWait		= [4,268,320,264,120];
	
	this.controls.lobby.pleaseWait.button				= new Array();
	this.controls.lobby.pleaseWait.button.cancel			= [6,351,337,96,32];

	this.controls.lobby.pleaseWait.location = [
		this.controls.lobby.pleaseWait.textBox.pleaseWait,
		this.controls.lobby.pleaseWait.button.cancel,
	];


	// this is also the Please Wait dialog in the lobby
	this.controls.lobby.lostConnection				= new Array();
	this.controls.lobby.lostConnection.name				= "Lost Connection";
	this.controls.lobby.lostConnection.id				= 17;
	
	this.controls.lobby.lostConnection.textBox			= new Array();
	this.controls.lobby.lostConnection.textBox.lostConnection	= [4,268,320,264,120];
	this.controls.lobby.lostConnection.textBox.lostConnection.key	= [5351];
	
	this.controls.lobby.lostConnection.button			= new Array();
	this.controls.lobby.lostConnection.button.ok			= [6,351,337,96,32];

	this.controls.lobby.lostConnection.location = [
		this.controls.lobby.lostConnection.textBox.lostConnection,
		this.controls.lobby.lostConnection.button.ok,
	];


	// Game Name Already Exists
	this.controls.lobby.gameExists					= new Array();
	this.controls.lobby.gameExists.name				= "Game Already Exists";
	this.controls.lobby.gameExists.id				= 26;
	
	this.controls.lobby.gameExists.textBox				= new Array();
	this.controls.lobby.gameExists.textBox.gameExists		= [4,438,300,326,150];
	this.controls.lobby.gameExists.textBox.gameExists.key		= [5138];
	
	this.controls.lobby.gameExists.location = [
		this.controls.lobby.gameExists.textBox.gameExists,
	];	


	// Game Does Not Exist (also A Game Already Exists With That Name and Server Down w/ different key)
	this.controls.lobby.gameDoesNotExist				= new Array();
	this.controls.lobby.gameDoesNotExist.name			= "Game Does Not Exist";
	this.controls.lobby.gameDoesNotExist.id				= 28;
	
	this.controls.lobby.gameDoesNotExist.textBox			= new Array();
	this.controls.lobby.gameDoesNotExist.textBox.text		= [4,438,300,326,150];
	this.controls.lobby.gameDoesNotExist.textBox.text.key		= [5159];

	this.controls.lobby.gameDoesNotExist.location = [
		this.controls.lobby.gameDoesNotExist.textBox.text,
	];


	this.controls.lobby.chat					= new Array();
	this.controls.lobby.chat.name					= "Lobby Chat";
	this.controls.lobby.chat.id					= 3;

	this.controls.lobby.chat.button 				= new Array();
	this.controls.lobby.chat.button.send				= [6,27,470,80,20];
	this.controls.lobby.chat.button.whisper				= [6,107,470,80,20];
	this.controls.lobby.chat.button.help				= [6,187,470,80,20];
	this.controls.lobby.chat.button.squelch				= [6,27,490,72,20];
	this.controls.lobby.chat.button.unsquelch			= [6,99,490,96,20];
	this.controls.lobby.chat.button.emote				= [6,195,490,72,20];

	this.controls.lobby.chat.textBox				= new Array();
	this.controls.lobby.chat.textBox.channelName			= [4,28,138,354,60];
	this.controls.lobby.chat.textBox.channelText           = [4,28,410,354,298];

	this.controls.lobby.chat.location = [
		this.controls.lobby.chat.button.send,
		this.controls.lobby.chat.button.whisper,
		this.controls.lobby.chat.button.help,
	];

		
	this.controls.lobby.create					= new Array();
	this.controls.lobby.create.name					= "Create Game";
	this.controls.lobby.create.id					= 4;

	this.controls.lobby.create.textBox				= new Array();
	this.controls.lobby.create.textBox.createGame			= [4,496,111,200,22];
	this.controls.lobby.create.textBox.gameName			= [4,427,134,150,12];
	this.controls.lobby.create.textBox.password			= [4,427,188,300,12];
	this.controls.lobby.create.textBox.gameDescription		= [4,427,243,300,12];
	this.controls.lobby.create.textBox.maxNumberOfPlayers		= [4,632,306,300,12];
	this.controls.lobby.create.textBox.characterDifference		= [4,632,342,300,12];
	this.controls.lobby.create.textBox.levels			= [4,705,342,150,12];
	this.controls.lobby.create.textBox.normal			= [4,723,380,150,12];
	this.controls.lobby.create.textBox.nightmare			= [4,579,380,150,12];
	this.controls.lobby.create.textBox.hell				= [4,459,380,150,12];
	
	this.controls.lobby.create.editBox				= new Array();
	this.controls.lobby.create.editBox.gameName			= [1,432,162,158,20];
	this.controls.lobby.create.editBox.password			= [1,432,217,158,20];
	this.controls.lobby.create.editBox.gameDescription		= [1,432,268,333,20];
	this.controls.lobby.create.editBox.maxNumberOfPlayers		= [1,657,308,27,20];
	this.controls.lobby.create.editBox.characterDifference		= [1,657,342,27,20];

	this.controls.lobby.create.button				= new Array();
	this.controls.lobby.create.button.createGame			= [6,594,433,172,32];
	this.controls.lobby.create.button.cancel			= [6,433,433,96,32];
	this.controls.lobby.create.button.maxNumberOfPlayersUp		= [6,681,296,15,12];//not tested
	this.controls.lobby.create.button.maxNumberOfPlayersDown	= [6,681,310,15,12];//not tested
	this.controls.lobby.create.button.useCharacterDifference	= [6,431,341,15,16];//not tested
	this.controls.lobby.create.button.characterDifferenceUp		= [6,681,332,15,12];//not tested
	this.controls.lobby.create.button.characterDifferenceDown	= [6,681,346,15,12];//not tested
	this.controls.lobby.create.button.normal			= [6,430,381,16,16];
	this.controls.lobby.create.button.nightmare			= [6,555,381,16,16];
	this.controls.lobby.create.button.hell				= [6,698,381,16,16];
	
	this.controls.lobby.create.location = [
		this.controls.lobby.create.editBox.gameName,
		this.controls.lobby.create.editBox.password,
		this.controls.lobby.create.editBox.gameDescription,
	];


	// insert all game join controls here
	this.controls.lobby.join					= new Array();
	this.controls.lobby.join.name					= "Join Game";
	this.controls.lobby.join.id					= 5;
	
	this.controls.lobby.join.editBox				= new Array();
	this.controls.lobby.join.editBox.gameName			= [1,432,148,155,20];
	this.controls.lobby.join.editBox.password			= [1,606,148,155,20];
	
	this.controls.lobby.join.textBox				= new Array();
	this.controls.lobby.join.textBox.joinGame			= [4,496,106,200,22];
	this.controls.lobby.join.textBox.gameName			= [4,428,121,150,12];
	this.controls.lobby.join.textBox.password			= [4,602,121,150,12];
	this.controls.lobby.join.textBox.gameNamePlayers		= [4,431,212,200,12];
	this.controls.lobby.join.textBox.gameList			= [4,432,393,160,173];	// list is stored in extended text
	this.controls.lobby.join.textBox.gameDetails			= [4,609,393,143,194];	// details is stored in extended text

	this.controls.lobby.join.button					= new Array();
	this.controls.lobby.join.button.joinGame			= [6,594,433,172,32];
	this.controls.lobby.join.button.cancel				= [6,433,433,96,32];
	
	this.controls.lobby.join.location = [
		this.controls.lobby.join.editBox.gameName,
		this.controls.lobby.join.textBox.joinGame,
		this.controls.lobby.join.textBox.gameList,		
	];

	
	// insert all game ladder controls here
	this.controls.lobby.ladder					= new Array();
	this.controls.lobby.ladder.name					= "Ladder";
	this.controls.lobby.ladder.id					= 6;

	this.controls.lobby.ladder.textBox				= new Array();
	this.controls.lobby.ladder.button				= new Array();
	this.controls.lobby.ladder.list					= new Array();


	// insert all game channel controls here
	this.controls.lobby.channel					= new Array();
	this.controls.lobby.channel.name				= "Channel List";
	this.controls.lobby.channel.id					= 7;

	this.controls.lobby.channel.textBox				= new Array();
	this.controls.lobby.channel.editBox				= new Array();
	this.controls.lobby.channel.button				= new Array();
	this.controls.lobby.channel.list				= new Array();


	// insert all main menu controls here
	this.controls.mainMenu						= new Array();
	this.controls.mainMenu.name					= "Main Menu";
	this.controls.mainMenu.id					= 8;

	this.controls.mainMenu.textBox					= new Array();
	this.controls.mainMenu.textBox.d2Version			= [4,0,599,200,40];

	this.controls.mainMenu.button					= new Array();
	this.controls.mainMenu.button.gateway				= [6,264,391,272,25];
	this.controls.mainMenu.button.battleNet				= [6,264,366,272,35];
	this.controls.mainMenu.button.otherMultiplayer			= [6,264,433,272,35];
	this.controls.mainMenu.button.singlePlayer			= [6,264,324,272,35];
	this.controls.mainMenu.button.credits				= [6,264,528,135,25];
	this.controls.mainMenu.button.cinematics			= [6,402,528,135,25];
	this.controls.mainMenu.button.exitDiabloII			= [6,264,568,272,35];

	this.controls.mainMenu.location = [
		this.controls.mainMenu.button.battleNet,
		this.controls.mainMenu.button.otherMultiplayer,
		this.controls.mainMenu.button.singlePlayer,
	];
	

	// connecting to battle.net
	this.controls.mainMenu.connecting				= new Array();
	this.controls.mainMenu.connecting.id				= 21;
	this.controls.mainMenu.connecting.name				= "Connecting to Battle.net";
	
	this.controls.mainMenu.connecting.textBox			= new Array();
	this.controls.mainMenu.connecting.textBox.connectingTo		= [4,222,280,340,60];
	this.controls.mainMenu.connecting.textBox.body			= [4,222,360,340,70];	// contains connecting to battle.net/fastest server, accessing your account, or checking versions
	this.controls.mainMenu.connecting.textBox.progress		= [4,222,370,340,20];	// dots
	
	this.controls.mainMenu.connecting.button			= new Array();
	this.controls.mainMenu.connecting.button.cancel			= [6,330,416,128,35];

	this.controls.mainMenu.connecting.location = [
		this.controls.mainMenu.connecting.textBox.connectingTo,
		this.controls.mainMenu.connecting.textBox.body,
		this.controls.mainMenu.connecting.textBox.progress,
		this.controls.mainMenu.connecting.button.cancel,
	];


	// startup screen
	this.controls.d2Splash						= new Array();
	this.controls.d2Splash.name					= "D2 Splash"
	this.controls.d2Splash.id					= 18;
	
	this.controls.d2Splash.textBox					= new Array();
	this.controls.d2Splash.textBox.copyright			= [4,100,580,600,80];
	
	this.controls.d2Splash.location = [
		this.controls.d2Splash.textBox.copyright,
	];



	// insert all bnet login controls here (including account settings)
	// add: ACCOUNT SETTINGS, CHANGE PASSWORD, GET NEW PASSWORD, CHANGE EMAIL, CREATE NEW ACCOUNT agreement & form
	this.controls.login						= new Array();
	this.controls.login.name					= "Login";
	this.controls.login.id						= 9;
	
	this.controls.login.textBox					= new Array();
	this.controls.login.textBox.accountName				= [4,321,340,300,32];
	this.controls.login.textBox.password				= [4,321,394,300,32];
	this.controls.login.textBox.heading				= [4,200,350,400,100];

	this.controls.login.editBox					= new Array();
	this.controls.login.editBox.accountName				= [1,322,342,162,19];
	this.controls.login.editBox.password				= [1,322,396,162,19];

	this.controls.login.button					= new Array();
	this.controls.login.button.createNewAccount			= [6,264,572,272,35];
	this.controls.login.button.accountSettings			= [6,264,528,272,35];
	this.controls.login.button.logIn				= [6,264,484,272,35];
	this.controls.login.button.exit					= [6,33,572,128,35];

	this.controls.login.location = [
		this.controls.login.textBox.accountName,
		this.controls.login.editBox.password,
		this.controls.login.editBox.accountName,
		this.controls.login.button.logIn,
	];


	// login error, permanent failure, bad account or password
	this.controls.login.loginError					= new Array();
	this.controls.login.loginError.name				= "Login Error";
	this.controls.login.loginError.id				= 10;

	this.controls.login.loginError.textBox				= new Array();
	this.controls.login.loginError.textBox.loginError		= [4,195,237,410,40];	// used for invalid login/password popups
	this.controls.login.loginError.textBox.invalidPassword		= [4,199,377,402,140];
	this.controls.login.loginError.textBox.invalidAccount		= [4,199,377,402,140];

	this.controls.login.loginError.button				= new Array();
	this.controls.login.loginError.button.ok			= [6,335,412,128,35];	// used for invalid login/password popups

	this.controls.login.loginError.location = [
		this.controls.login.loginError.textBox.loginError,
		this.controls.login.loginError.button.ok,
	];


	// unable to connect, related to ip-bans or no internet connection
	this.controls.login.unableToConnect				= new Array();
	this.controls.login.unableToConnect.name			= "Unable To Connect";
	this.controls.login.unableToConnect.id				= 11;
	
	this.controls.login.unableToConnect.textBox			= new Array();
	this.controls.login.unableToConnect.textBox.title		= [4,158,220,485,40];
	this.controls.login.unableToConnect.textBox.head		= [4,162,320,477,100];
	this.controls.login.unableToConnect.textBox.body		= [4,162,420,477,100];

	this.controls.login.unableToConnect.button			= new Array();
	this.controls.login.unableToConnect.button.ok			= [6,335,450,128,35];
	
	this.controls.login.unableToConnect.location = [
		this.controls.login.unableToConnect.textBox.title,
		this.controls.login.unableToConnect.textBox.head,
		this.controls.login.unableToConnect.button.ok,
	];


	this.controls.login.cdkeyInUse					= new Array();
	this.controls.login.cdkeyInUse.name				= "Cdkey In Use";
	this.controls.login.cdkeyInUse.id				= 19;

	this.controls.login.cdkeyInUse.textBox				= new Array();
	this.controls.login.cdkeyInUse.textBox.unableToConnect		= [4,158,220,485,40];
	this.controls.login.cdkeyInUse.textBox.cdkeyInUse		= [4,162,270,477,50];
	this.controls.login.cdkeyInUse.textBox.byWho			= [4,158,310,485,40];
	this.controls.login.cdkeyInUse.textBox.onlyOneRegistered	= [4,162,420,477,100];
	
	this.controls.login.cdkeyInUse.button				= new Array();
	this.controls.login.cdkeyInUse.button.ok			= [6,335,450,128,35];
	
	this.controls.login.cdkeyInUse.location = [
		this.controls.login.cdkeyInUse.textBox.unableToConnect,
		this.controls.login.cdkeyInUse.textBox.cdkeyInUse,
		this.controls.login.cdkeyInUse.textBox.byWho,
	];


	// login - invalid cdkey
	this.controls.login.invalidCdkey				= new Array();
	this.controls.login.invalidCdkey.id				= 22;
	this.controls.login.invalidCdkey.name				= "Invalid Cdkey";
	
	this.controls.login.invalidCdkey.textBox			= new Array();
	this.controls.login.invalidCdkey.textBox.unableToConnect	= [4,158,220,485,40];
	this.controls.login.invalidCdkey.textBox.invalidCdkey		= [4,162,320,477,100];
	this.controls.login.invalidCdkey.textBox.invalidCdkey.key	= [5202, 10912];
	this.controls.login.invalidCdkey.textBox.uninstall		= [4,162,420,477,100];

	this.controls.login.invalidCdkey.button				= new Array();
	this.controls.login.invalidCdkey.button.ok			= [6,335,450,128,35];

	this.controls.login.invalidCdkey.location = [
		this.controls.login.invalidCdkey.textBox.unableToConnect,
		this.controls.login.invalidCdkey.textBox.invalidCdkey,
		this.controls.login.invalidCdkey.textBox.uninstall,
		this.controls.login.invalidCdkey.button.ok
	];


	// insert all character select screen controls here (including single player)
	this.controls.characterSelect					= new Array();
	this.controls.characterSelect.name				= "Character Select";
	this.controls.characterSelect.id				= 12;
	
	this.controls.characterSelect.textBox				= new Array();
	this.controls.characterSelect.textBox.selectedCharName		= [4,85,78,466,42];
	this.controls.characterSelect.textBox.currentRealm		= [4,629,44,145,21];
	this.controls.characterSelect.textBox.selectedCurrentRealm	= [4,626,100,151,44];
	this.controls.characterSelect.textBox.characters		= new Array(8);
	this.controls.characterSelect.textBox.characters[0]		= [4,237,178,72,93];
	this.controls.characterSelect.textBox.characters[1]		= [4,509,178,72,93];
	this.controls.characterSelect.textBox.characters[2]		= [4,237,271,72,93];
	this.controls.characterSelect.textBox.characters[3]		= [4,509,271,72,93];
	this.controls.characterSelect.textBox.characters[4]		= [4,237,364,72,93];
	this.controls.characterSelect.textBox.characters[5]		= [4,509,364,72,93];
	this.controls.characterSelect.textBox.characters[6]		= [4,237,457,72,93];
	this.controls.characterSelect.textBox.characters[7]		= [4,509,457,72,93];
	this.controls.characterSelect.textBox.characterInfo		= new Array(8);
	this.controls.characterSelect.textBox.characterInfo[0]		= [4,37,178,200,92];
	this.controls.characterSelect.textBox.characterInfo[1]		= [4,309,178,200,92];
	this.controls.characterSelect.textBox.characterInfo[2]		= [4,37,271,200,92];
	this.controls.characterSelect.textBox.characterInfo[3]		= [4,309,271,200,92];
	this.controls.characterSelect.textBox.characterInfo[4]		= [4,37,364,200,92];
	this.controls.characterSelect.textBox.characterInfo[5]		= [4,309,364,200,92];
	this.controls.characterSelect.textBox.characterInfo[6]		= [4,37,457,200,92];
	this.controls.characterSelect.textBox.characterInfo[7]		= [4,309,457,200,92];
	this.controls.characterSelect.textBox.deleteConfirmation	= [];

	this.controls.characterSelect.button				= new Array();
	this.controls.characterSelect.button.ok				= [6,627,572,128,35];
	this.controls.characterSelect.button.exit			= [6,33,572,128,35];
	this.controls.characterSelect.button.createNew			= [6,33,528,168,60];
	this.controls.characterSelect.button.convertTo			= [6,233,528,168,60];
	this.controls.characterSelect.button.deleteChar			= [6,433,528,168,60];
	this.controls.characterSelect.button.changeRealm		= [6,609,113,182,30];
	this.controls.characterSelect.button.deleteYes			= [6,421,337,96,32];
	this.controls.characterSelect.button.deleteNo			= [];
	
	this.controls.characterSelect.location = [
		this.controls.characterSelect.textBox.selectedCharName,
		this.controls.characterSelect.textBox.characters[0],
		this.controls.characterSelect.textBox.characterInfo[7],		
	];


	this.controls.characterCreate					= new Array();
	this.controls.characterCreate.name				= "Character Create";
	this.controls.characterCreate.id				= 29;

	this.controls.characterCreate.editBox				= new Array();
	this.controls.characterCreate.editBox.charName			= [1,318,510,157,16];

	this.controls.characterCreate.textBox				= new Array();
	this.controls.characterCreate.textBox.selectHeroClass		= [4,0,80,800,50];
	this.controls.characterCreate.textBox.charName			= [4,321,512,200,32];
	this.controls.characterCreate.textBox.bottomText		= [4,210,610,430,120];
	this.controls.characterCreate.textBox.expansionChar		= [4,339,561,200,32];
	this.controls.characterCreate.textBox.hardcore			= [4,339,581,100,32];
	this.controls.characterCreate.textBox.ladderChar		= [4,339,601,200,32];
	this.controls.characterCreate.textBox.className			= [4,0,180,800,100];
	this.controls.characterCreate.textBox.classDesc			= [4,250,210,300,100];

	this.controls.characterCreate.button				= new Array();
	this.controls.characterCreate.button.exit			= [6,33,572,128,35];
	this.controls.characterCreate.button.expansionChar		= [6,319,540,15,16];
	this.controls.characterCreate.button.hardcore			= [6,319,560,15,16];
	this.controls.characterCreate.button.continueHardcore		= [6,421,337,96,32];
	this.controls.characterCreate.button.ladderChar			= [6,319,580,15,16];
	this.controls.characterCreate.button.ok				= [6,627,572,128,35];

	this.controls.characterCreate.chars				= new Array(9);
	this.controls.characterCreate.chars[0]				= [2,100,337,88,184]; // amazon 
	this.controls.characterCreate.chars[6]        = [2,232,364,88,184]; // assassin
	this.controls.characterCreate.chars[2]        = [2,301,333,88,184]; // necro
	this.controls.characterCreate.chars[4]        = [2,400,330,88,184]; // barb
	this.controls.characterCreate.chars[3]        = [2,521,339,88,184]; // pally
	this.controls.characterCreate.chars[1]        = [2,626,353,88,184]; // sorc
	this.controls.characterCreate.chars[5]        = [2,720,370,88,184]; // druid
  
	this.controls.characterCreate.location = [
		this.controls.characterCreate.textBox.selectHeroClass,
	];

	// Name exists dialog on characer create page
  this.controls.characterCreate.nameExists     = new Array();
  this.controls.characterCreate.nameExists.name    = "Name Exists";
  this.controls.characterCreate.nameExists.id      = 30;
  
  this.controls.characterCreate.nameExists.textBox   = new Array();
  this.controls.characterCreate.nameExists.textBox.errorMsg  = [4,268,320,264,120];
  this.controls.characterCreate.nameExists.textBox.errorMsg.key = [5165];

  this.controls.characterCreate.nameExists.button    = new Array();
  this.controls.characterCreate.nameExists.button.cancel = [6,351,337,96,32];

  this.controls.characterCreate.nameExists.location = [
    this.controls.characterCreate.nameExists.textBox.errorMsg,
  ];




	// realm down on char select screen
	this.controls.characterSelect.realmDown				= new Array();
	this.controls.characterSelect.realmDown.name			= "Realm Down";
	this.controls.characterSelect.realmDown.id			= 13;

	this.controls.characterSelect.realmDown.textBox			= new Array();
	this.controls.characterSelect.realmDown.textBox.realmDown	= [4,45,318,531,140];
	this.controls.characterSelect.realmDown.textBox.realmDown.key	= [11162];

	this.controls.characterSelect.realmDown.location = [
		this.controls.characterSelect.realmDown.textBox.realmDown,
	];
	this.controls.characterSelect.realmDown.checkNullText		= true;


	// Connecting on char select screen
	this.controls.characterSelect.connecting			= new Array();
	this.controls.characterSelect.connecting.name			= "Connecting...";
	this.controls.characterSelect.connecting.id			= 23;

	this.controls.characterSelect.connecting.textBox		= new Array();
	this.controls.characterSelect.connecting.textBox.connecting	= [4,37,178,547,35];
	this.controls.characterSelect.connecting.textBox.connecting.key	= [11065];

	this.controls.characterSelect.connecting.location = [
		this.controls.characterSelect.connecting.textBox.connecting,
	];
	this.controls.characterSelect.connecting.checkNullText		= true;


	// Popup: You were,disconnected from,battle.net.  Please,reconnect.
	this.controls.characterSelect.disconnected			= new Array();
	this.controls.characterSelect.disconnected.name			= "Disconnected";
	this.controls.characterSelect.disconnected.id			= 14;
	
	this.controls.characterSelect.disconnected.textBox		= new Array();
	this.controls.characterSelect.disconnected.textBox.disconnected	= [4,268,300,264,100];
	
	this.controls.characterSelect.disconnected.button		= new Array();
	this.controls.characterSelect.disconnected.button.ok		= [6,351,337,96,32];
	
	this.controls.characterSelect.disconnected.location = [
		this.controls.characterSelect.disconnected.textBox.disconnected,
		this.controls.characterSelect.disconnected.button.ok,
	];
	
	
	// Single Player - Difficulty Select
	this.controls.characterSelect.difficulty			= new Array();
	this.controls.characterSelect.difficulty.name			= "Select Difficulty";
	this.controls.characterSelect.difficulty.id			= 20;

	this.controls.characterSelect.difficulty.textBox		= new Array();
	this.controls.characterSelect.difficulty.textBox.select		= [4,264,260,272,35];

	this.controls.characterSelect.difficulty.button			= new Array();
	this.controls.characterSelect.difficulty.button.normal		= [6,264,297,272,35];
	this.controls.characterSelect.difficulty.button.nightmare	= [6,264,340,272,35];
	this.controls.characterSelect.difficulty.button.hell		= [6,264,383,272,35];
	
	this.controls.characterSelect.difficulty.location = [
		this.controls.characterSelect.difficulty.textBox.select,
		this.controls.characterSelect.difficulty.button.normal,
		this.controls.characterSelect.difficulty.button.nightmare,
		this.controls.characterSelect.difficulty.button.hell,
	];


	// new character controls
	this.controls.newCharacter					= new Array();	
	this.controls.newCharacter.name					= "New Character";	
	this.controls.newCharacter.id					= 15;	

	this.controls.newCharacter.textBox				= new Array();
	this.controls.newCharacter.editBox				= new Array();
	this.controls.newCharacter.button				= new Array();


	// Please Wait control popup
	this.controls.characterSelect.pleaseWait			= new Array();
	this.controls.characterSelect.pleaseWait.name			= "Please Wait";
	this.controls.characterSelect.pleaseWait.id			= 16;

	this.controls.characterSelect.pleaseWait.textBox		= new Array();
	this.controls.characterSelect.pleaseWait.textBox.pleaseWait	= [4,268,300,264,100];

	this.controls.characterSelect.pleaseWait.button			= new Array();
	this.controls.characterSelect.pleaseWait.button.cancel		= [6,351,337,96,32];

	this.controls.characterSelect.pleaseWait.location = [
		this.controls.characterSelect.pleaseWait.textBox.pleaseWait,
		this.controls.characterSelect.pleaseWait.button.cancel,
	];
	
	
	// select gateway (realm)
	this.controls.gateway						= new Array();
	this.controls.gateway.name					= "Select Gateway";
	this.controls.gateway.id					= 27;
	this.controls.gateway.baseX					= 285;
	this.controls.gateway.baseY					= 352;
	this.controls.gateway.nextY					= 24;

	this.controls.gateway.textBox					= new Array();
	this.controls.gateway.textBox.selectGateway			= [4,237,270,340,35];
	this.controls.gateway.textBox.ifCurrentGateway			= [4,257,345,320,84];
	this.controls.gateway.textBox.realmList				= [4,257,500,292,160];

	this.controls.gateway.button					= new Array();
	this.controls.gateway.button.ok					= [6,281,538,96,32];
	this.controls.gateway.button.cancel				= [6,436,538,96,32];

	this.controls.gateway.location = [
		this.controls.gateway.textBox.realmList,
		this.controls.gateway.button.ok,
		this.controls.gateway.button.cancel,
	];

	// Terms Of Use
	this.controls.termsOfUse					= new Array();
	this.controls.termsOfUse.name					= "Terms Of Use";
	this.controls.termsOfUse.id					= 31;
	
	this.controls.termsOfUse.button					= new Array();
	this.controls.termsOfUse.button.agree				= [6,525,513,128,35];
	this.controls.termsOfUse.button.disagree			= [6,133,513,128,35];
	
	this.controls.termsOfUse.location = [
		this.controls.termsOfUse.button.agree,
		this.controls.termsOfUse.button.disagree,
	];


	// create new account
	this.controls.newAccount					= new Array();
	this.controls.newAccount.name					= "Create New Account";
	this.controls.newAccount.id					= 32;
	
	this.controls.newAccount.editBox				= new Array();
	this.controls.newAccount.editBox.accountName			= [1,322,342,162,19];
	this.controls.newAccount.editBox.password			= [1,322,396,162,19];
	this.controls.newAccount.editBox.confirmPassword		= [1,322,450,162,19];

	this.controls.newAccount.button					= new Array();
	this.controls.newAccount.button.ok				= [6,627,572,128,35];

	this.controls.newAccount.location = [
		this.controls.newAccount.editBox.accountName,
		this.controls.newAccount.editBox.password,
		this.controls.newAccount.editBox.confirmPassword,
		this.controls.newAccount.button.ok,
	];
	

	// register email
	this.controls.email						= new Array();
	this.controls.email.name					= "Register Email";
	this.controls.email.id						= 33;
	
	this.controls.email.editBox					= new Array();
	this.controls.email.editBox.email				= [4,252,340,300,32];
	this.controls.email.editBox.confirmEmail			= [4,252,394,300,32];

	this.controls.email.button					= new Array();
	this.controls.email.button.register				= [6,265,527,272,35];
	this.controls.email.button.dontRegister				= [6,265,572,272,35];

	this.controls.email.location = [
		this.controls.email.editBox.email,
		this.controls.email.editBox.confirmEmail,
		this.controls.email.button.register,
		this.controls.email.button.dontRegister,
	];

	// Confirm No Email
	this.controls.email.confirm    					 = new Array();
	this.controls.email.confirm.name   				 = "Confirm No Email";
	this.controls.email.confirm.id    				 = 34;

	this.controls.email.confirm.button				 = new Array();
	this.controls.email.confirm.button.continue  			 = [6,415,412,128,35];
	
	this.controls.email.confirm.location = [
		this.controls.email.confirm.button.continue,
	];

	// getLocation will iterate over these, in this order, do error checkers first
	this.locations = [
		this.controls.characterSelect.pleaseWait,
		this.controls.lobby.gameDoesNotExist,
		this.controls.lobby.gameExists,
		this.controls.lobby.lostConnection,
		this.controls.characterCreate.nameExists,
		this.controls.lobby.pleaseWait,
		this.controls.lobby.inLine,
		this.controls.lobby.serverDown,
		this.controls.characterSelect.realmDown,
		this.controls.characterSelect.connecting,
		this.controls.characterSelect.disconnected,
		this.controls.login.loginError,
		this.controls.login.invalidCdkey,
		this.controls.login.unableToConnect,
		this.controls.login.cdkeyInUse,
		this.controls.lobby.create,
		this.controls.lobby.join,
//		ladder
//		channel
		this.controls.lobby.chat,
		this.controls.lobby,
		this.controls.characterSelect.difficulty,
		this.controls.characterSelect,
		this.controls.login,
		this.controls.mainMenu.connecting,
		this.controls.gateway,
		this.controls.mainMenu,
		this.controls.d2Splash,
		this.controls.characterCreate,
		this.controls.termsOfUse,
		this.controls.email.confirm,
		this.controls.email,
		this.controls.newAccount,
	];

	this.gameTypes = [
		this.controls.mainMenu.button.singlePlayer,
		this.controls.mainMenu.button.battleNet,
		this.controls.mainMenu.button.otherMultiplayer,
	];
	
	this.gameDifficulties = [
		this.controls.lobby.create.button.normal,
		this.controls.lobby.create.button.nightmare,
		this.controls.lobby.create.button.hell,
	];
	
	this.singlePlayerDifficulties = [
		this.controls.characterSelect.difficulty.button.normal,
		this.controls.characterSelect.difficulty.button.nightmare,
		this.controls.characterSelect.difficulty.button.hell,
	];
	
	this.clickDelay = 250;
	this.textDelay = 100;
	this.clickDelayRandom = 0;
	this.textDelayRandom = 0;
	
	this.realmNames = [];
	this.realmNames["U.S. WEST"] = 0;
	this.realmNames["U.S. EAST"] = 1;
	this.realmNames["ASIA"] = 2;
	this.realmNames["EUROPE"] = 3;


	// returns control object if exists, else null
	this.get = function( controlArray ) {
		retControl = 0;
		if( controlArray && controlArray.length==5 ) {
			retControl = GetControl( controlArray[0], controlArray[1], controlArray[2], controlArray[3], controlArray[4] );
		}
		return retControl;
	}

	// Character class selection in create character dialog
	this.clickClass = function( classId ) {
	  if ( control = this.get( this.controls.characterCreate.chars[classId] ) ) {
	    control.Click(-25, 100);
	    return true;
	  }
	  else {
	    return false;
	  }
	}
	// clicks object, if it exists, return true if exists, false if not
	this.click = function( controlArray, _x, _y, _skipdelay ) {
		if( control = this.get( controlArray ) ) {
			if( _x || _y ) {
				control.Click( _x, _y );
			} else {
				control.Click( );
			}

			if(!_skipdelay) Delay( this.clickDelay + Random( 0, this.clickDelayRandom ) );
			return true;
		}
		return false;
	}

	// sets text on object, returns false if not exists
	this.setText = function( controlArray, str ) {
		if( controlArray[0]==1 ) {
		if( control = this.get( controlArray ) ) {
			var _string = '' + str;
			control.SetText( _string );
			
			Delay( this.textDelay + Random( 0, this.textDelayRandom ) );
			return true;
		}
		}
		return false;
	}
	
	// clicks a realm entry, this is 0 based! 0 = top entry (uswest)
	this.clickRealmEntry = function( realmEntryIndex ) {
		this.click( this.controls.gateway.textBox.realmList, 0, (realmEntryIndex*this.controls.gateway.nextY)+(this.controls.gateway.nextY/2) );
	}

	// returns the 0 based index of the currently selected realm
	this.getCurrentRealmIndex = function( ) {
		retVal = -1;
		control = this.get( controlData.controls.mainMenu.button.gateway );
		if(control) {
			realmString = control.text.substring(control.text.indexOf(":")+2, control.text.length);
			if(realmString in this.realmNames) retVal = this.realmNames[realmString];
		}
		return retVal;
	}

	this.getLocation = function( ) {
		for(_i=0; _i<this.locations.length; _i++) {
			found = 0;
			for(_j=0; _j<this.locations[_i].location.length; _j++) {
				if( (control = this.get( this.locations[_i].location[_j] )) && (!this.locations[_i].checkNullText || control.text!=null) ) {
					if(this.locations[_i].location[_j].key) {
						for(_k=0; _k<this.locations[_i].location[_j].key.length; _k++) {
							if((_s = control.GetText()) && GetLocaleString(this.locations[_i].location[_j].key[_k]) == String(_s.join(" ")) ) {
								found++;
								break;
							}
						}
					} else {
						found++;
					}
				}
			}
			if(found == this.locations[_i].location.length) return this.locations[_i];
		}

		return 0;	// no valid location found
	
	}
}


//
//	NTLogger.ntl
//

function NTLG_Log (scriptname, type, level, msg) {
	if (arguments.length > 4) {
		sendEventToOOG(D2NT_MGR_PRINT_LOG, COLOR_1 + "NTLG: log message dropped, too many arguments", 0);
		return;
	}
	ticks = GetTickCount();
	msg = scriptname + ": " + msg;
	if (arguments.length == 3) msg = "";
	regex = new RegExp(NTLG_DELIM, "g");
	msg = msg.replace(regex, NTLG_DELIM_REPLACE);
	maxmsglength = maxbufferlength - (3 * String(NTLG_DELIM).length) - String(ticks).length - String(type).length - String(level).length;
	while (msg.length > maxmsglength) {
		msgTrunc = msg.substr(0,maxmsglength);
		msgTrunc = msgTrunc.replace(/^\s+|\s+$/g, "");
		msg = msg.substr(maxmsglength);
		NTLG_LogEvent(scriptname, ticks, type, level, msgTrunc);
	}
	msg = msg.replace(/^\s+|\s+$/g, "");
	NTLG_LogEvent(scriptname, ticks, type, level, msg);
}

function NTLG_LogEvent(scriptname, ticks, type, level, msg) {
	logged = NTC_SendMsgToScript("NTLogHandler.ntj", ticks + NTLG_DELIM + type + NTLG_DELIM + level + NTLG_DELIM + msg);
	if (!logged) NTLG_QueueLogEvent(scriptname, ticks, type, level, msg);
}

function NTLG_QueueLogEvent(scriptname, ticks, type, level, msg) {
	var _entry = new Array();
	_entry.push(msg);
	_entry.push(level);
	_entry.push(type);
	_entry.push(ticks);
	_entry.push(scriptname);
	_NTLG_LogList.push(_entry);
}

function NTLG_FlushLogQueue() {
	if (_NTLG_LogList.length > NTLG_LOGLIMIT) {
		NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "NTLG_FlushLogQueue: buffered length exceeds limit, flushing "+ _NTLG_LogList.length +" messages");
		NTLG_EmergencyFlushLogQueue();
	}
	_logList = _NTLG_LogList;
	_NTLG_LogList = new Array();
	for(i = 0 ; i < _logList.length ; i++) {
		scriptname = _logList[i].pop();
		ticks = _logList[i].pop();
		type = _logList[i].pop();
		level = _logList[i].pop();
		msg = _logList[i].pop();
		NTLG_LogEvent(scriptname, ticks, type, level, msg);
	}
}

function NTLG_EmergencyFlushLogQueue() {
	_logList = _NTLG_LogList;
	_NTLG_LogList = new Array();
	for(i = 0 ; i < _logList.length ; i++) {
		scriptname = _logList[i].pop();
		ticks = _logList[i].pop();
		type = _logList[i].pop();
		level = _logList[i].pop();
		msg = _logList[i].pop();
		time = NTLG_TimeStamp(parseInt(log[1]));
		NTLG_Logline("logs/Logger/flush-"+ticks+".txt", time, type, level, msg);
	}
}

function NTLG_LogLine(filename, time, level, message) {
	file = FileOpen(filename, 2);
	file.WriteLine(time + ": " + level + ": " + message);
	file.Close();
}

function NTLG_TimeStamp(ticks) {
	var currentSmallTicks = GetTickCount();
	var tickDiff = currentSmallTicks - ticks;
	var time = new Date();
	var currentBigTicks = time.getTime();
	var adjustedTime = currentBigTicks - tickDiff;
	time.setTime(adjustedTime);
	var hour   = time.getHours();
	var minute = time.getMinutes();
	var second = time.getSeconds();
	var millisecond = time.getMilliseconds();
	if (NTConfig_TwelveHourClock) {
		var DoN = "AM";
		if (hour > 11) { DoN = "PM"; }
		if (hour > 12) { hour = hour - 12; }
		if (hour == 0) { hour = 12; }
	}
	if (hour < 10) { hour = "0" + hour; }
	if (minute < 10) { minute = "0" + minute; }
	if (second < 10) { second = "0" + second; }
	if (String(millisecond).length == 2) { millisecond = millisecond + "0"; }
	if (String(millisecond).length == 1) { millisecond = millisecond + "00"; }
	if (NTConfig_TwelveHourClock)
		timeString = hour +	':' +  minute + ':' + second + '.' + millisecond + " " + DoN;
	else
		timeString = hour +	':' +  minute + ':' + second + '.' + millisecond;
	return timeString;
}
function d2B_NTLoggerVar() { 

	NTConfig_LoggingEnabled = false;
	var NTConfig_TwelveHourClock = false;
	var NTConfig_maxLogSize = 10000000;
	var NTConfig_Log_Level = 0;
	var NTConfig_Item_Level = 1;

	Include("libs/common/NTCommon.ntl");
	var _NTLG_LogList = new Array();

	// Logger Message Types
	const NTLG_TYPE_LOG = 0;
	const NTLG_TYPE_ITEM = 1;

	// Message Levels
	const NTLG_LEVEL_DEBUG = 0;
	const NTLG_LEVEL_INFO = 1;
	const NTLG_LEVEL_WARN = 2;
	const NTLG_LEVEL_ERROR = 3;
	const NTLG_LEVEL_ITEM_WHITE = 0;
	const NTLG_LEVEL_ITEM_MAGIC = 1;
	const NTLG_LEVEL_ITEM_RARE = 2;
	const NTLG_LEVEL_ITEM_CRAFT = 3;
	const NTLG_LEVEL_ITEM_UNIQUE = 4;

	// Delimeter - log msgs are of the format: scriptname, ticks, type, level, msg separated by NTLG_DELIM
	const NTLG_DELIM = "%"
	const NTLG_DELIM_REPLACE = "percent"

	// Log Queue size to never exceed
	const NTLG_LOGLIMIT = 1000;

	// Internal send to script buffer size
	const maxbufferlength = 63;
	
	return;
}



//
//	NTBotGame.ntj
//

/*function D2NTStatus(where, time, message) { return SendCopyData('D2NT Manager', null, where << 16 | time, message); }

function NTMain_NTBotGame() {
	if (!Load("NTBot/tools/NTLogHandler.ntj")) {
		NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "Error: Logger failed to initialize");
	}
	Delay(1000);

	InitLife = me.hp;

	Include("libs/common/NTCommon.ntl");
	NTC_IncludeLibs();
	NTC_IncludeConfig("NTBot/char_configs");
	//Include("libs/common/NTExp.ntl");

	try {
		NT_LoadConfig();
	}
	catch (e) {
		while(me.ingame){
			Print(COLOR_1 + "Error in your char config file");
			Print(COLOR_1 + "You must correct the error before the bot will run");
			Print(COLOR_2 + "To get help on this error visit");
			Print(COLOR_2 + "www.projectetal.com/wiki -> load config errors");
			Delay(10000);
		}
	}
	//NTE_InitializeStats();
	//Print(NTConfig_FreeSpace);

	if (NTConfig_MinIngameTime > 0) {
		endtime = GetTickCount() + 1000 * 60 * NTConfig_MinIngameTime;
	}

	if(!me.gamename && me.GetStat(12) > 90 && !me.playertype) { Say("/players 5"); } // For softcore SP players to increase MF and such

	if(NTConfig_FreeSpace == 0)
		Print(COLOR_2 + "Please don't forget to set NTConfig_FreeSpace in your character config to avoid your inv filling");

	NT_ClearMessages(); // leech improvements

	if (!NTSI_LoadNIPFiles("NTBot/item_configs")) {
		NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "Exiting Game- Either no inventory on character or invalid NIP filename/path in character configuration");
		ExitGame();
	}
	NTU_LogExitStatus("F");
	if(NTConfig_StartDelay > 0) {
		NTC_Delay(NTConfig_StartDelay);
	}

	GetPath(me.areaid, me.x, me.y, me.x, me.y, true);

	SetUIState(0x0A, true);

	if(!NTT_PutBackEnigma()) {
		NTC_Delay(240000); // Wait 4 mins to prevent r/d 240000
		ExitGame();
	}

	if(NTConfig_CheckPassword && !me.gamepassword){
		Print(COLOR_1 + "1No password found exiting game");//s
		NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "Exiting Game- No Password");
		NTC_Delay(2000);
		ExitGame();
	}

	Corpses = NTT_GetCorpses();
	if (Corpses > 0 || InitLife < 10)
		NTU_DeathLog(Corpses, InitLife);
	if(NTConfig_Script.length > 0)
	{
		NTCU_InitCubing();
		NTT_ClearInventory();
		NTT_ClearBelt();

		if(!NTT_LookForEnigma()) {
			if (GetUIState(0x01))
				SetUIState(0x01, false);
			NTC_Delay(240000); // Wait 4 mins to prevent r/d 240000
			ExitGame();
		}

		if(NTConfig_GoWestFromLut){ // if bot starts in act 2 use warriv to go to act 1
			GoWestFromLutGholein();
		}

		Load("NTBot/tools/NTToolsThread.ntj");

		if(NTConfig_HostileHandler)
			Load("NTBot/tools/NTHostHandler.ntj");

		if(NTConfig_Announcer)
			Load("NTBot/tools/NTLevelAnnouncer.ntj");

		if(DPSMeter)
			Load("NTBot/tools/DPS.ntj");
			
		Load("NTBot/tools/ChatR.ntj");

		RegisterEvent(EVENT_GAMEMSG, NT_GameMsgEvents);
		RegisterEvent(EVENT_KEYDOWN, NT_KeyEvents);
		RegisterEvent(EVENT_SCRIPTMSG, NT_ScriptMsgEvents);

		Load("NTBot/bots/" + NTConfig_Script[CurScriptIndex]);
		SetStatusText(Rev + " "+ NTConfig_Script[CurScriptIndex]);

		Include("libs/common/NTSnagit.ntl");
		NTSI_ClearIgnoredItems();

		NTC_LogCurScript(NTConfig_Script[CurScriptIndex]);//jinay item log

		var leaderParty = false;
		
		// Dynamic leaders
		var NTLeader_LoggedFromFile = NT_File("logs/" + me.account + ".leaderName.txt", 0);
		
		while(!LastScript || CloneDiabloNotify || SoJNotify || NTC_InMyParty(NTConfig_Leader) || NTC_InMyParty(NTLeader_LoggedFromFile)) // SoJNotify is a part of soj addon
		{
			NTC_Delay(1000);

			for(var i = 0 ; i < NTConfig_Script.length && !leaderParty ; i++)
			{
				if(NTConfig_Script[i].toLowerCase().indexOf("leech") != -1 || NTConfig_Script[i].toLowerCase().indexOf("helper") != -1)
				{
					for(var j = 0 ; j < NTConfig_PartyMaxTime && !NTC_InMyParty(NTConfig_Leader) && !NTC_InMyParty(NTLeader_LoggedFromFile) ; j++)
						Delay(1000);

					if(NTC_InMyParty(NTConfig_Leader) || NTC_InMyParty(NTLeader_LoggedFromFile))
					{
						leaderParty = true;
					}
					else
					{
						NTC_PrintPossibleLeaders();
						Print(COLOR_1 + "Can't find leader!");
						Delay(500);
						Print(COLOR_1 + "You either have it spelled or cased wrong");
						Delay(500);
						Print(COLOR_1 + "Or leader is not in game");
						Delay(500);
						Print(COLOR_1 + "Check logs/namelog/" + me.charname + "-leaderName.txt for possible leader names from this game"); // this should print a list of all toons in game so people can C/P if they are having probs
						Delay(1500);
						ExitGame();
					}
					break;
				}
			}

			if(LastScript && !checkActOnce && leaderParty && NTC_InMyParty(NTConfig_Leader)) {
				NTTM_CheckAct();
				checkActOnce = true; // this is added so if you need to go back in someplace the bot doesn't keep towning
			}

			if(leaderParty && !NTC_InMyParty(NTConfig_Leader) && !NTC_InMyParty(NTLeader_LoggedFromFile)){
				//if(!LastScript) {
				//	NTE_ComputeStats(false);
				//}
				Delay(350);
				_Checkscript = GetScript();
				if(_Checkscript){
					NTC_StopScriptLeecher();
					Delay(150);
				}
				NTC_CancelMenus();
				Delay(NTConfig_LeechExitDelay);
				ExitGame();
			}

			if(SoJNotify)
			{
				SoJElapsedTime += 1;

				if(LastScript)
				{
					NTTM_CheckAct();
					SetStatusText(COLOR_4 + "Waiting for SoJ sales... " + COLOR_0 + (NTConfig_SoJWaitTime*60-SoJElapsedTime));
				}

				if(SoJElapsedTime >= NTConfig_SoJWaitTime*60)
					SoJNotify = false;
			}
		}
	}
	//NTE_ComputeStats(false);
	if(NTConfig_PublicMode && NTConfig_PropsForEtal > 0) {
		Include("NTBot/char_configs/EtalPR.ntl");
		for(var i = 0 ; i < NTConfig_PropsForEtal ; i++) {
			Say(NTC_RandomSelect(etalSpam));
			Delay(1500);
		}
		Say("Check out ProjectEtal.com");
		Delay(1000); // change this to 1 second
	}

    if (endtime != null || NTConfig_MinIngameTime > 0 && GetTickCount() < endtime) {
		NTTM_CheckAct();
        var gameidle = parseInt((endtime - GetTickCount())/1000);        
        for(var i = 0 ; i < gameidle ; i++) {
			SetStatusText("Waiting " + (gameidle-i) + " seconds to exit game!");
            Delay(1000);
        }
    }

	ExitGame();
	Delay(3000);// testing to avoid repetive stats sent to manager log
}

var WhoDatIs; 									// Needed for spam catcher addition, DO NOT remove

function NT_GameMsgEvents(msg, type) {
	var _holdPauseCheck = "";
	_area = GetArea();
	switch(type){
		case 0:
			if(msg.indexOf(NTConfig_Leader) != -1){ // leech improvements
				NTC_CheckPlayer(NTConfig_Leader);
				if((_leaderareaid == 130 || _leaderareaid == 131) && msg.indexOf(NTConfig_TakeTpBaal) != -1){ // all baal leech scripts will use the same one
					NT_File("logs/messagecomands/"+me.charname+"-baal.txt", 1, "takebtp")
				}
				else if((_leaderareaid == 130 || _leaderareaid == 131) && msg.indexOf(NTConfig_GrabShrine) != -1){ // so you can set the var for grabbing shrine different from the take tp one
					NT_File("logs/messagecomands/"+me.charname+"-baal.txt", 1, "grabshrine")
				}
				else if(_leaderareaid == 108 && msg.indexOf(NTConfig_TakeTpDiablo) != -1){ // all diablo leech scripts will use the same one
					NT_File("logs/messagecomands/"+me.charname+"-diablo.txt", 1, "takedtp")
				}
				else if(_leaderareaid == 83 && msg.indexOf(NTConfig_TakeTpTravincal) != -1){ // all diablo leech scripts will use the same one
					NT_File("logs/messagecomands/"+me.charname+"-trav.txt", 1, "takettp")
				}
			}
			break;
		case 1:
			if(msg.toLowerCase().indexOf("d2nt") != -1 || msg.toLowerCase().indexOf("error") != -1 || msg.toLowerCase().indexOf("fail") != -1) {
				var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
				var logfile = FileOpen("logs/errorlog/"+me.charname+"-errorlog.txt", 2);
				if(!logfile)
					var logfile = FileOpen("logs/errorlog/"+me.charname+"-errorlog.txt", 1);

				logfile.WriteLine(date + " - " + msg);
				logfile.Close();
			}
			else if(msg.toLowerCase().indexOf("skipped") != -1 ) {
				var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
				var logfile = FileOpen("logs/skiplog/"+me.charname+"-skiplog.txt", 2);
				if(!logfile)
					var logfile = FileOpen("logs/skiplog/"+me.charname+"-skiplog.txt", 1);

				logfile.WriteLine(date + " - " + msg + " ( " + _area.name + " ) ");
				logfile.Close();
			}
			break;
		case 4:
            if(msg.indexOf(CloneDiabloString) != -1) {
                CloneDiabloNotify = true;
                SoJNotify = false;
                NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + CloneDiabloString);
                NT_LogDclone();//log event to file
				if(NTConfig_ExitonDclone){ExitGame();}
				
                if(NTConfig_CheckCloneDiablo){					
                    me.maxgametime = 0;
                    SetStatusText(COLOR_1 + CloneDiabloString);
                    D2NTStatus("Stop", 0, "Stop"); //This is a fake ID itll just interrupt the current status loop. Simple but effective.
                    D2NTStatus(8, 0, CloneDiabloString);
             
                    _holdPauseCheck = NTU_GetExitStatus();
                    while(_holdPauseCheck == "T") {
                        NTC_Delay(500);
                        _holdPauseCheck = NTU_GetExitStatus();
                    }
                    NTC_StopScript(NTConfig_Script[CurScriptIndex]);
                    NTC_Delay(500);

                    NTTM_CheckAct();
					if(NTConfig_KillDclone)
						Load("NTBot/bots/NTClone.ntj");
                }
            }
			else if(msg.indexOf(SoJString) != -1 && !CloneDiabloNotify && NTConfig_SoJWaitTime > 0) { // part of soj addon. !CloneDiabloNotify was added to prevent timer start on oversales after Diablo walks.
				if(me.diff < 2) {
					NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + "Not waiting for DClone - not in a hell game");
				}
				if(me.diff == 2) {
					SoJNotify = true;
					SoJElapsedTime = 0;             
					NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + msg);
					me.maxgametime = 0;
                }			
			}
			break;
		default: break;
	}
}

function NT_KeyEvents(keycode) {
	var _script;
	switch(keycode) {
		case Do_PauseBot:
		_script = NTC_FindScript(NTConfig_Script[CurScriptIndex]);
			if(_script) {
				if(_script.running) {
					_script.Stop();
					NT_ClearMessages();
					NTC_Delay(300);
					ClickMap(NTC_CLICK_LUP, NTC_SHIFT_NONE, null);
					SetStatusText(COLOR_1 + Rev + "    Paused " + NTConfig_Script[CurScriptIndex]);
				}
				else {
					Load("NTBot/bots/" + NTConfig_Script[CurScriptIndex]);
					SetStatusText(Rev + " " + NTConfig_Script[CurScriptIndex]);
				}
			}
			break;
		case Do_PrevScript:
			_script = NTC_FindScript(NTConfig_Script[CurScriptIndex]);

			if(_script.running) {
				_script.Stop();
				NT_ClearMessages();
				NTC_Delay(300);
				ClickMap(NTC_CLICK_LUP, NTC_SHIFT_NONE, null);
				SetStatusText(COLOR_11 + Rev + " Stopped " + NTConfig_Script[CurScriptIndex]);
				break;
			}
			else {
				for(i=0; i<NTConfig_Script.length-1; i++) {
					if(CurScriptIndex < NTConfig_Script.length-1)
						CurScriptIndex++;
					else
						CurScriptIndex = 0;
				}
				SetStatusText(COLOR_14 + Rev + " Back to " + NTConfig_Script[CurScriptIndex]);
			}
			break;
		case Do_NextScript:
			_script = NTC_FindScript(NTConfig_Script[CurScriptIndex]);

			if(_script.running) {
				_script.Stop();
				NT_ClearMessages();
				SetStatusText(COLOR_11 + Rev + " Stopped " + NTConfig_Script[CurScriptIndex]);
			}
			else if(++CurScriptIndex < NTConfig_Script.length)
				SetStatusText(COLOR_14 + Rev + " Skipped to " + NTConfig_Script[CurScriptIndex]);
			else if(++CurScriptIndex >= NTConfig_Script.length) {
				CurScriptIndex = 0;
				SetStatusText(COLOR_2 + Rev + " Skipped to " + NTConfig_Script[CurScriptIndex]);
			}
			break;
		case Do_DropItems:
			NTU_DropItems();
			break;
		case Do_DevTools:
			NTU_DevelopementTools();
			break;
		case Do_CoordLog:
			NTU_LogPrint("logs/testlog/"+me.charname+"-Coords.txt", " New Coord[" + me.x + ", " + me.y + "] " );
			break;
		case Do_HotKeyList:
			Key_HotList();
			break;
		case Do_CursorILvL:
			NTU_CursorILvl();
			break;
		case Do_StatsLog:
			NTU_CheckMyStats();
			break;
		case Do_PrintCoord:
			NTU_CheckCoord();
			break;
		case Do_CheckSpace:
			if(CheckStashSpace)
				NTT_CheckFreeStashSpace(true);
			if(CheckInvSpace)
				NTT_CheckFreeInventorySpace(true);
			break;
		case Do_NipCheck:
			NTU_TLNipCheck();
			break;
		case Do_InvTxtLog:
			NTU_TLInventory();
			break;
		case Do_CheckBPs:
			T_BPsPrint();
			break;
		case Do_ExitGame:
			Print(COLOR_4 + "Calculating stats for game!");
			//NTE_ComputeStats(false);
			ExitGame();
			break;
	}
}

function NT_ScriptMsgEvents(msg) {
	var _area;

	switch(msg)
	{
	case "QuitGame":
		NTC_StopScript(NTConfig_Script[CurScriptIndex]);
		NTC_CancelMenus();
		LastScript = true;
		break;
	case "HOSTILE":
		NTC_SendMsgToScript(NTConfig_Script[CurScriptIndex], "pause");
		break;
	case "SCRIPT_END":
		if(++CurScriptIndex < NTConfig_Script.length)
		{
			NTTM_CheckAct();
			Load("NTBot/bots/" + NTConfig_Script[CurScriptIndex]);
			SetStatusText(Rev + "   " + NTConfig_Script[CurScriptIndex]);
			NTC_LogCurScript(NTConfig_Script[CurScriptIndex]);
		}
		else{
			LastScript = true;
		}
		break;
	default:
		Print(COLOR_1 + NTConfig_Script[CurScriptIndex] + " : " + msg + " failed");

		_area = GetArea();

		if(_area)
			NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + NTConfig_Script[CurScriptIndex] + " : " + msg + " failed (" + _area.name + ")");
		else
			NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + NTConfig_Script[CurScriptIndex] + " : " + msg + " failed (unknown area)");

		if(++CurScriptIndex < NTConfig_Script.length)
		{
			NTTM_CheckAct();
			Load("NTBot/bots/" + NTConfig_Script[CurScriptIndex]);
			SetStatusText(Rev + "  "  + NTConfig_Script[CurScriptIndex]);
			NTC_LogCurScript(NTConfig_Script[CurScriptIndex]);
		}
		else
			LastScript = true;
		break;
	}
}

function NT_ClearMessages() { 					// leech improvemetst
	for(var i = 0 ; i < NTConfig_Script.length ; i++){
		if(NTConfig_Script[i].toLowerCase().indexOf("leech") != -1){
			if(NTConfig_Script[i].toLowerCase().indexOf("baal") != -1){
				NT_File("logs/messagecomands/"+me.charname+"-baal.txt", 1, " ");
			}
			if(NTConfig_Script[i].toLowerCase().indexOf("diablo") != -1){
				NT_File("logs/messagecomands/"+me.charname+"-diablo.txt", 1, " ");
			}
			if(NTConfig_Script[i].toLowerCase().indexOf("trav") != -1){
				NT_File("logs/messagecomands/"+me.charname+"-trav.txt", 1, " ");
			}
		}
	}
}

function NTC_CancelMenus() { 					// more koreans
	while (GetUIState(0x01) || GetUIState(0x08) || GetUIState(0x0C) || GetUIState(0x0F) || GetUIState(0x14) ||
		GetUIState(0x17) || GetUIState(0x19) ||   GetUIState(0x1A) || GetUIState(0x24)){

		for (var i = 0; i < 40; i++){
			if ((i % 20) == 0){
				me.Cancel(1);
			}
			Delay(100);
			if (!GetUIState(0x01) && !GetUIState(0x08) && !GetUIState(0x0C) && !GetUIState(0x0F) && !GetUIState(0x14) &&
					!GetUIState(0x17) && !GetUIState(0x19) &&  !GetUIState(0x1A) && !GetUIState(0x24)){

				NTC_PingDelay(300);
				break;
			}
		}
	}
}

function NTC_StopScriptLeecher() {
	_script = NTC_FindScript(NTConfig_Script[CurScriptIndex]);
	if(_script){
		if(_script.running){
			_script.Stop();
			NTC_Delay(150);
			ClickMap(NTC_CLICK_LUP, NTC_SHIFT_NONE, null);
		}
	}
	return;
}

function NTC_PrintPossibleLeaders() {
	var _player;
	var _myPartyId;

	_player = GetPlayerUnit();

	if(_player)
	{
		do
		{
			if( _player.name == me.name)
				continue;
			NTC_LogPrintSimple("logs/namelog/"+me.charname+"-leaderName.txt", _player.name);
		} while(_player.GetNext());
	}
	return false;
}


function NT_LogDclone() {
    var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");

    var LogClone = FileOpen("logs/DClone/"+me.name+"_Dclone.txt", 2);
    if(!LogClone)
        var LogClone = FileOpen("logs/DClone/"+me.name+"_Dclone.txt", 1);
  
        LogClone.WriteLine("DClone Walks"+ " Server Address " + me.gameserverip + " " + date);

    LogClone.Close();
    return;
}


*/
//
// NTExpl.ntl
//

/*function NTE_InitializeStats() {
    _startLvl = me.GetStat(12);
    _startExp = me.GetStat(13);
    if (_startExp < 0 || _startLvl >= 86) { _startExp = (2147483648 + _startExp); }
    if (_startExp < 2147483648 && _startLvl >= 97) { _startExp = (2147483648 + _startExp); }

    _startTime = GetTickCount();
	
	_startGold = (me.GetStat(14) + me.GetStat(15));
}

function NTE_ComputeStats(chickenFlag) {
    var _endLvl = me.GetStat(12);
    var _lvlsGained = _endLvl - _startLvl;
    var _endExp = me.GetStat(13);
    if (_endExp < 0 || _endLvl >= 86) { _endExp = (2147483648 + _endExp); }
    if (_endExp < 2147483648 && _endLvl >= 97) { _endExp = (2147483648 + _endExp); }
	
	var _endGold = (me.GetStat(14) + me.GetStat(15));
	if(_endGold == _startGold) { _goldCount = ""; } 
	else if(_endGold < _startGold) { _goldCount = "\n" + COLOR_4 + "Gold " + COLOR_1 + "Lost: " + COLOR_2 + (_startGold - _endGold); }
	else{ _goldCount = "\n" + COLOR_4 + "Gold Found: " + COLOR_2 + (_endGold - _startGold); }

    var _endLvlExp = _TotalExp[_endLvl];
    var _expGained = _endExp - _startExp;
    var _endTime = GetTickCount();
    if (_expGained <= 0) { _expGained = '0'; }

    // Calculate percent of Exp obtained toward next level
    // Remaining Exp / Exp needed to level
    var _progressPercent = parseInt(1000 * (_endExp - _endLvlExp) / _ExpToNextLvl[_endLvl],10) / 10;
	if(_progressPercent >= 0) { var _prop = _progressPercent + "%"; } else { var _prop = "0%"; };

    // Estimate number of runs remaining until next level based on Exp gained
    // Remaining Exp needed to level / Exp Gained
	if(_expGained > 0)
    {	var _runsToLevel = (100 - _progressPercent) * _ExpToNextLvl[_endLvl] / (100 * _expGained);
		if(_runsToLevel > 10) {_runsToLevel = parseInt(_runsToLevel,10); } else { _runsToLevel = parseInt(100 * _runsToLevel,10) / 100; };
		_runsToLvl = addSeparatorsNF(_runsToLevel, ",", ".", ",")
	}
	else {if(_endLvl == 99) {var _runsToLvl = 'You have reached Level 99';} else {var _runsToLvl = 'NA'}}

    var GameIP = me.gameserverip.split(".")[3];
    if(!GameIP) { GameIP = "Single Player"; }
    var RunTime = parseInt(((_endTime - _startTime) / 60000),10) + "m " + (parseInt(((_endTime - _startTime) / 1000),10) - parseInt(((_endTime - _startTime) / 60000),10) * 60) + "s";

	if(_lvlsGained > 0) var DidGainLvl = COLOR_1 + "\n Levels Gained : " + COLOR_1 + _lvlsGained;
	else if(_lvlsGained < 1) var DidGainLvl = "";

	//----------------------------------
	//petrus2 edit starts here
	//----------------------------------

	var _timeToLvl = (_runsToLevel * (_endTime - _startTime)) ;

	if(_expGained > 0)
	{	if (_timeToLvl >= 86400000)
			var TimeToLvl = parseInt((_timeToLvl / 86400000),10) + "d " + (parseInt((_timeToLvl / 3600000),10) - parseInt((_timeToLvl / 86400000),10) * 24)  + "h " + (parseInt((_timeToLvl / 60000),10) - parseInt((_timeToLvl / 3600000),10) * 60) + "m " + (parseInt((_timeToLvl / 1000),10) - parseInt((_timeToLvl / 60000),10) * 60) + "s";
		else
			{	if (_timeToLvl >= 3600000)
					var TimeToLvl = parseInt((_timeToLvl / 3600000),10) + "h " + (parseInt((_timeToLvl / 60000),10) - parseInt((_timeToLvl / 3600000),10) * 60) + "m " + (parseInt((_timeToLvl / 1000),10) - parseInt((_timeToLvl / 60000),10) * 60) + "s";
				else
					var TimeToLvl = parseInt((_timeToLvl / 60000),10) + "m " + (parseInt((_timeToLvl / 1000),10) - parseInt((_timeToLvl / 60000),10) * 60) + "s";
			}
	}
	else var TimeToLvl = "NA";


	if(_runsToLvl == 'You have reached Level 99') var LvLProgXP = "";
	else if(_runsToLvl != 'You have reached Level 99') var LvLProgXP = COLOR_4 + "\n Est. Time Until Next Level: " + COLOR_2 + TimeToLvl + COLOR_4 + "\n Est. Runs Until Next Level: " + COLOR_2 + _runsToLvl + COLOR_4 + "\n Current Level Progress: " + COLOR_2 + _prop + COLOR_4 + "\n Experience Gained: " + COLOR_2 + addSeparatorsNF(_expGained, ",", ".", ",");


	//-----------------------------------
	//petrus2 edit ends here
	//-----------------------------------
	if(MultiBotter) { MyRunnerName = COLOR_3 + me.charname + " "; } 
	else { MyRunnerName = ""; }

	if(_endLvl != 99) { PercToMax = MyRunnerName + COLOR_4 + "Game Statistics: [" + COLOR_8 + _prop + COLOR_4 + " to " + COLOR_8 + (_endLvl+1) + COLOR_4 + "]"; }
	else { PercToMax = MyRunnerName + COLOR_4 + "Game Statistics: " + COLOR_8 + "[Already 99]"; }

	if (!chickenFlag) {
        // Messages to Console
		NTC_SendLogToOOG(NTC_LOG_COMMON, PercToMax + ";" +
		COLOR_1 + "--------------------------------------------------" +
		LvLProgXP +
        COLOR_4 + "\n Character Level: " + COLOR_2 + _endLvl +
		DidGainLvl +
		COLOR_4 + "\n Elapsed time: " + COLOR_2 + RunTime +
        COLOR_4 + "\n Game IP Was" + COLOR_2 + "[" + GameIP + "]" +
		_goldCount +
        COLOR_0 + "\n Free Space Stash: " + COLOR_2 + NTT_CheckFreeStashSpace() +
		COLOR_1 + "\n --------------------------------------------------");

	}
}*/




//	_____________________________________________________________________________________________________________________________ 

//
// 						LeaderStarter.ntj globals...
//

	var characterdiff        =  "99";
	var maxNumberOfPlayersss = "8";

	var joinChatAfterGame			= true;			 		// true: join chat after leaving a game
	var joinRandomChannel			= false;			 	// true: join a random channel, otherwise it will use the channel below..
	var joinChannelInChat			= "op cookies r us";	// Channel you want your bot to join

	var WhisperFList = false;									// Whisper your friends when you enter a game or not

	var chatMessageOnJoin		= "";		// msg to say Login command for channel bot will only be sent once
	var chatMessageAfterGame1	= "";		// msg #1 to say after each game on Channel
	var chatMessageAfterGame2	= "";		// msg # #2 to say after each game on Channel
	var chatMessageAfterGame3	= "";		// msg # #3 to say after each game on Channel
	var chatMessageAfterGame4	= "";		// msg # #4 to say after each game on Channel
	var chatMessageAfterGame5	= "";		// msg # #5 to say after each game on Channel

	var saygamename 		= false;		// true: enables game message settings
	var nextgamemessage		= "";			// This will come befor your next game name eg "New game is"
	var saypassword 		= false;		// msg game pw
	var saytime 			= false;		// msg how much time till creation
	var timemessage 		= "";			// msg comes after pw & befor the time eg. "in about" xx seconds say time MUST be true for this to be used

	var gameMinLength		= 360000;	// time in milliseconds, minimum game length, 180 seconds default (1 game/3 minutes)

	// All of the delays for actions from bot start until in-game
	// ===========================================================

	var unableToConnectRetry		= 15;		// time in minutes to retry connecting on connection fail (real value is +/- 1 min)
	var realmDownRetry				= 900;		// time in minutes to retry connecting on a realm down (default is 300 minutes)
	var disconnectedRetry			= 5;		// time in minutes to retry on a disconnection (usually ip ban related)
	var cdkeyInUseRetry				= 5;		// time in minutes to retry on a cdkey in use error message (set to 0 to stop)
	var connectingToBnetTimeout		= 20000;	// time in milliseconds to wait for a login to time out and click cancel and retry
	var characterScreenTimeout		= 10000;	// time in milliseconds to wait for character screen to appear
	var pleaseWaitTimeout			= 10000;	// time in milliseconds to wait for a please wait popup
	var createGameThreshold			= 30000;	// time in milliseconds to wait between making games
	var createGameThresholdRandom	= 5000;		// time in milliseconds to randomly add +/- to the game create time
	var createGameTimeout			= 44000;	// time in milliseconds to register a failed to create game
	var waitInLineTimeout			= 60000;	// time in milliseconds to wait in lines for a create game (60 second default)
	var characterSelectDelay		= 7000;		// time in milliseconds to wait before selecting a character on the char screen
	var loginDelay					= 5000;		// time in milliseconds to wait before submitting login information
	var clickDelay					= 500;		// wait X milliseconds before next action after a click event
	var textDelay					= 500;		// wait X milliseconds before next action after inserting text into a textbox
	var clickDelayRandom			= 500;		// random amount of time to add to a click
	var textDelayRandom				= 500;		// random amount of time to add to a text set
	var gameDoesNotExistDelayMin	= 600000;	// how long to wait when a Game Does Not Exist occurs - minimum - default 10 minutes
	var gameDoesNotExistDelayMax	= 900000;	// how long to wait when a Game Does Not Exist occurs - maximum - default 15 minutes
	var gameDoesNotExistTimeout		= 30000;	// how long to wait for the dialog to disappear (default 30 seconds, don't change this)
	var waitBeforeEnterChatMin		= 1000;		// min how long to wait before entering chat
	var waitBeforeEnterChatMax		= 2000;		// max how long to wait before entering chat
	var waitInChatBeforeActionsMin	= 2000;		// min how long to wait before joining channel
	var waitInChatBeforeActionsMax	= 3000;		// max how long to wait before joining channel
	var waitBeforeNextLineChatMin	= 500;		// Minimum ammount of time to add after each text line	
	var waitBeforeNextLineChatMax	= 1500;		// Maximum ammount of time to add after each text line
	var ftjDelay = 180;							// time to idle before trying if leader failed to join.  In seconds.

	// DONT EDIT ANYTHING BELOW THIS

	// =============================================================================
	// Debug : set to true if you are experiencing problems with your JoinBot
	// it will log in your OOG the lobby chat actions
	// =============================================================================
	var Debug = false;

	// D2NT Manager Command
	const D2NT_MGR_LOADING = 1;
	const D2NT_MGR_READY = 2;
	const D2NT_MGR_LOGIN = 3;
	const D2NT_MGR_CREATE_GAME = 4;
	const D2NT_MGR_INGAME = 5;
	const D2NT_MGR_RESTART = 6;
	const D2NT_MGR_CHICKEN = 7;
	const D2NT_MGR_PRINT_STATUS = 8;
	const D2NT_MGR_PRINT_LOG = 9;
	var alreadyLoggedIn = false; // will only send the login command once leave as unless you want to login everytime you join a channel
	var lastGameMade = GetTickCount();
	var lastGameStatus = 0;
	var nextGameMake = 0;
	var inGameAt = 0;
	var chatActionsDone = false;
	var lastGameFailed = false;
	var tempDelay = Random(waitBeforeNextLineChatMin, waitBeforeNextLineChatMax);
	var gameInfo = "";
	var bugignor = true;
	var ftjcount = 0;
	// Include("libs/controlInfo.ntl");
	// Include("libs/common/NTColorConverter.ntl");
	// Include("libs/common/NTLogger.ntl");

	controlInfo();

	var controlData = new controlInfo();

//
// 						NTColorConverter.nt globals...
//

	const COLOR_0 = "ÿc0";
	const COLOR_1 = "ÿc1";
	const COLOR_2 = "ÿc2";
	const COLOR_3 = "ÿc3";
	const COLOR_4 = "ÿc4";
	const COLOR_5 = "ÿc5";
	const COLOR_6 = "ÿc6";
	const COLOR_7 = "ÿc7";
	const COLOR_8 = "ÿc8";
	const COLOR_9 = "ÿc9";
	const COLOR_10 = "ÿc:";
	const COLOR_11 = "ÿc;";
	const COLOR_12 = "ÿc,";
	const COLOR_13 = "ÿc\\";
	const COLOR_14 = "ÿc!";
	const COLOR_15 = "ÿc%";
	const COLOR_16 = "ÿc'";
	const COLOR_17 = "ÿc&";
	const COLOR_18 = "ÿc(";
	const COLOR_19 = "ÿc*";
	const COLOR_20 = "ÿc)";
	const COLOR_21 = "ÿc+";
	const COLOR_22 = "ÿc,";
	const COLOR_23 = "ÿc-";
	const COLOR_24 = "ÿc.";
	const COLOR_25 = "ÿc<"; 

	//Or referencable by name..
	const C_WHITE = COLOR_0;
	const C_RED = COLOR_1;
	const C_GREEN = COLOR_2;
	const C_BLUE = COLOR_3;
	const C_BROWN = COLOR_4;
	const C_GREY = COLOR_5;
	const C_ORANGE = COLOR_8;
	const C_YELLOW = COLOR_9;
	const C_DARK_GREEN = COLOR_10;
	const C_PURPLE = COLOR_11;

	// replacements for ntitemlog
	const REGEX1 = new RegExp("(ÿc.)?\n", "g");

	const REGEX2 = new RegExp("ÿc0ÿc0", "g");
	const REPLACE2 = "ÿc0";

	const REGEX3 = new RegExp("ÿc1ÿc1", "g");
	const REPLACE3 = "ÿc1";

	const REGEX4 = new RegExp("(: ÿc3)", "g");
	const REPLACE4 = ": ";

	const REGEX5 = new RegExp("(- ÿc3)", "g");
	const REPLACE5 = "- ";

	const REGEX6 = new RegExp("ÿc[0-9]", "gi");
	const REPLACE6 = "";

//
// 						NTLogger.ntl globals...
//

	NTConfig_LoggingEnabled = false;
	var NTConfig_TwelveHourClock = false;
	var NTConfig_maxLogSize = 10000000;
	var NTConfig_Log_Level = 0;
	var NTConfig_Item_Level = 1;

	Include("libs/common/NTCommon.ntl");
	var _NTLG_LogList = new Array();

	// Logger Message Types
	const NTLG_TYPE_LOG = 0;
	const NTLG_TYPE_ITEM = 1;

	// Message Levels
	const NTLG_LEVEL_DEBUG = 0;
	const NTLG_LEVEL_INFO = 1;
	const NTLG_LEVEL_WARN = 2;
	const NTLG_LEVEL_ERROR = 3;
	const NTLG_LEVEL_ITEM_WHITE = 0;
	const NTLG_LEVEL_ITEM_MAGIC = 1;
	const NTLG_LEVEL_ITEM_RARE = 2;
	const NTLG_LEVEL_ITEM_CRAFT = 3;
	const NTLG_LEVEL_ITEM_UNIQUE = 4;

	// Delimeter - log msgs are of the format: scriptname, ticks, type, level, msg separated by NTLG_DELIM
	const NTLG_DELIM = "%"
	const NTLG_DELIM_REPLACE = "percent"

	// Log Queue size to never exceed
	const NTLG_LOGLIMIT = 1000;

	// Internal send to script buffer size
	const maxbufferlength = 63;


//
// 						NTBotGame.ntj globals...
//

	var CurScriptIndex = 0;
	var LastScript = false;
	var Rev = "112-BE";

	var SoJNotify = false;
	var CloneDiabloString = GetLocaleString(11005);
	var SoJString = GetLocaleString(11004).substr(3);
	var CloneDiabloNotify = false;
	var SoJElapsedTime = 0;
	var InitLife;
	var Corpses = 0;
	var checkActOnce = false;
	var endtime = null;

//
//	NTExp.ntl
//
	/*var _TotalExp = [0, 0, 500, 1500, 3750, 7875, 14175, 22680, 32886, 44396, 57715, 72144, 90180, 112725, 140906, 176132, 220165, 275207, 344008, 430010, 537513, 671891, 839864, 1049830, 1312287, 1640359, 2050449, 2563061, 3203826, 3902260, 4663553, 5493363, 6397855, 7383752, 8458379, 9629723, 10906488, 12298162, 13815086, 15468534, 17270791, 19235252, 21376515, 23710491, 26254525, 29027522, 32050088, 35344686, 38935798, 42850109, 47116709, 51767302, 56836449, 62361819, 68384473, 74949165, 82104680, 89904191, 98405658, 107672256, 117772849, 128782495, 140783010, 153863570, 168121381, 183662396, 200602101, 219066380, 239192444, 261129853, 285041630, 311105466, 339515048, 370481492, 404234916, 441026148, 481128591, 524840254, 572485967, 624419793, 681027665, 742730244, 809986056, 883294891, 963201521, 1050299747, 1145236814, 1248718217, 1361512946, 1484459201, 1618470619, 1764543065, 1923762030, 2097310703, 2286478756, 2492671933, 2717422497, 2962400612, 3229426756, 3520485254, 0, 0];
	var _ExpToNextLvl = [0, 500, 1000, 2250, 4125, 6300, 8505, 10206, 11510, 13319, 14429, 18036, 22545, 28181, 35226, 44033, 55042, 68801, 86002, 107503, 134378, 167973, 209966, 262457, 328072, 410090, 512612, 640765, 698434, 761293, 829810, 904492, 985897, 1074627, 1171344, 1276765, 1391674, 1516924, 1653448, 1802257, 1964461, 2141263, 2333976, 2544034, 2772997, 3022566, 3294598, 3591112, 3914311, 4266600, 4650593, 5069147, 5525370, 6022654, 6564692, 7155515, 7799511, 8501467, 9266598, 10100593, 11009646, 12000515, 13080560, 14257811, 15541015, 16939705, 18464279, 20126064, 21937409, 23911777, 26063836, 28409582, 30966444, 33753424, 36791232, 40102443, 43711663, 47645713, 51933826, 56607872, 61702579, 67255812, 73308835, 79906630, 87098226, 94937067, 103481403, 112794729, 122946255, 134011418, 146072446, 159218965, 173548673, 189168053, 206193177, 224750564, 244978115, 267026144, 291058498, 0, 0];

	var _startLvl;
	var _startExp;
	var _startTime;
	var _startGold;*/

/*
Notes on the leaderstarter.ntj code:

added a line that sends whisper game name for leechers when in game revised by stairbuilder on 1-2-11
added fix for white screen of death credit to korean modders revised by stairbuilder on 2-17-11      
added fix for creation button sticking revised by stairbuilder on 2-17-11 							
added sending game name and pw to txt file for leecher text file joining 9-25-11     				 
added a while loop and manager print if a bad cd key is used or bad account or password stair 9-25-11 
added txt file joining and added game count over 99 mod 12-1-12										
*/

